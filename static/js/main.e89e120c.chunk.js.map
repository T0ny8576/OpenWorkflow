{"version":3,"sources":["diagram.js","utils.js","infoBox.js","toolbar.js","elementModal.js","App.js","serviceWorker.js","index.js","wca-state-machine_pb.js"],"names":["joint","shapes","basic","Circle","define","attrs","circle","stroke-width","text","font-weight","standard","Link","line","sourceMarker","type","width","stroke","smooth","Diagram","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","graph","dia","Graph","state_shape_width","state_shape_height","state_spacing_x","state_spacing_y","state_per_row","cellId2FSMElement","renderAllStates","bind","assertThisInitialized","renderAllTransitions","getStateName2CellMap","clearGraph","inherits","createClass","key","value","_this$props","onClickCell","paperWidth","$el","$","el","console","log","paper","Paper","height","gridSize","model","restrictTranslate","on","Math","floor","parseInt","options","clear","cell","stateCells","push","fsm","_this2","getStatesList","map","state","idx","x","y","label","getName","fsa","State","position","size","addGraphCellWithRef","_this3","states","stateName2Cell","getTransitionsList","transition","source","target","getNextState","CustomArrow","id","labels","getElements","jointElement","stateName","attr","error","ref","addCell","_this4","react_default","a","createElement","Component","fsmPb","require","FSMElementType","STATE","Symbol","TRANSITION","freeze","getFSMElementType","element","getProcessorsList","isObject","o","getPropertyByString","s","replace","split","i","n","length","k","findStatePbByName","result","findTransitionOriginateState","curTransition","elementToFormValues","values","elementType","name","to","from","instruction","audio","getInstruction","getAudio","image","getImage","video","getVideo","callable","elementCallables","elementCallableItem","item","getCallableName","callableArgs","JSON","parse","getCallableArgs","args","keys","callableToFormValues","getPredicatesList","Error","getElementCallables","formCallableToElementCallable","callbleFormValue","setFunc","callablePbType","zoo","callableArray","_loop","callableValue","callablePb","setName","setCallableName","setCallableArgs","stringify","formValuesToElement","formValue","initElement","undefined","addStates","Transition","addTransitions","newName","aux","oldName","setNextState","setStateName","setProcessorsList","Processor","procZoo","newFromStateName","oldFromState","index","indexOf","splice","setTransitionFromState","oldFromStateName","instPb","Instruction","setAudio","setImage","setVideo","setInstruction","setPredicatesList","TransitionPredicate","predZoo","getColumnWidth","rows","accessor","headerText","cellLength","max","apply","toConsumableArray","row","concat","min","InfoBox","imageInstUrl","res","URL","revokeObjectURL","blob","Blob","createObjectURL","prepareResource","tableData","callableItem","callable_name","callable_args","tableColumns","Header","filterMethod","filter","matchSorter","filterAll","Cell","main_default","src","ListGroup_default","style","margin","ListGroupItem_default","variant","Fragment","alt","es","data","filterable","defaultFilterMethod","String","columns","defaultPageSize","makeTable","instance","ToolBar","_ref","onImport","onAdd","onExport","onEdit","onDelete","Row_default","ButtonGroup_default","Col_default","sm","lib_default","as","onChange","Button_default","className","onClick","Dropdown_default","Toggle","Menu","Item","isEmpty","errorMessage","test","BSFormikField","field","placeholder","defaultValue","isValid","objectWithoutProperties","Form_default","Group","Row","Label","column","Control","assign","required","ImageUploadField","imageBytes","form","e","fileArray","forEach","fileContent","setFieldValue","SelectFormikField","_ref2","selectOptions","react_select_esm","find","option","onBlur","CallableNameField","_ref3","elementModal_BSFormikField","CallableArgField","_ref4","addFieldError","errors","fieldName","createCallableMultiFields","callableTitle","arrayHelpers","zooOptions","getZooOptions","formik_esm","component","validate","elementModal_SelectFormikField","createCallableArgMultiFields","remove","argIndex","ElementModal","React","createRef","onHide","title","_this$props2","show","onModalCancel","onModalSave","callableZoo","callableButtonValue","initValues","getInitModalValuesFromElement","Modal_default","Title","Body","initialValues","onSubmit","_ref5","setSubmitting","render","_ref6","existingItemArray","includes","isDuplicate","isUniqueName","fsmStateOptions","elementModal_ImageUploadField","createTransitionBasicFields","eachCallable","Footer","current","submitForm","App","diagramRef","diagramContainerRef","alert","StateMachine","curFSMElement","modalInitElement","alertMsg","msg","showNewElementModal","newElementModalType","Container_default","fluid","Alert_default","dismissible","backgroundColor","diagram_Diagram","window","innerWidth","toolbar_ToolBar","infoBox","elementModal","setState","fsmData","deserializeBinary","err","loadFsm","getStartState","setStartState","fsmPbSerialized","serializeBinary","saveAs","isSafe","isElementSafeToDelete","elementIdx","hasCurElement","deleteStatePb","deleteTransitionPb","elementView","fsmElement","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","jspb","goog","global","Function","exportSymbol","proto","opt_data","Message","initialize","DEBUG","COMPILED","displayName","GENERATE_TO_OBJECT","prototype","toObject","opt_includeInstance","includeInstance","f","obj","getFieldWithDefault","callableName","callableKwargsMap","getCallableKwargsMap","$jspbMessageInstance","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","getFieldNumber","readString","readMessage","message","Map","readBytes","skipField","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","writeString","getLength","writeBytes","setProto3StringField","opt_noLazyCreate","getMapField","clearCallableKwargsMap","getImage_asB64","getVideo_asB64","getImage_asU8","getVideo_asU8","bytesAsB64","bytesAsU8","setProto3BytesField","repeatedFields_","predicatesList","toObjectList","nextState","addPredicates","writeRepeatedMessage","writeMessage","getRepeatedWrapperField","setRepeatedWrapperField","opt_value","opt_index","addToRepeatedWrapperField","clearPredicatesList","getWrapperField","setWrapperField","clearInstruction","hasInstruction","getField","processorsList","transitionsList","addProcessors","clearProcessorsList","setTransitionsList","clearTransitionsList","statesList","assetsMap","getAssetsMap","startState","setStatesList","clearStatesList","clearAssetsMap","object","extend","exports"],"mappings":"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","file":"static/js/main.e89e120c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport $ from \"jquery\";\nimport joint from \"jointjs\";\n\n// define custom state machine JointJS elements\njoint.shapes.basic.Circle.define(\"fsa.State\", {\n  attrs: {\n    circle: {\n      \"stroke-width\": 2\n    },\n    text: {\n      \"font-weight\": \"800\"\n    }\n  }\n});\n\njoint.shapes.standard.Link.define(\"fsa.CustomArrow\", {\n  attrs: {\n    line: {\n      sourceMarker: {\n        type: \"circle\",\n        width: 5,\n        stroke: \"none\"\n      }\n    }\n  },\n  smooth: true\n});\n\nconst create_transition_cell = (source, target, label) => {\n  var cell = new joint.shapes.fsa.CustomArrow({\n    source: {\n      id: source.id\n    },\n    target: {\n      id: target.id\n    },\n    labels: [\n      {\n        position: 0.5,\n        attrs: {\n          text: {\n            text: label || \"\"\n          }\n        }\n      }\n    ]\n  });\n  return cell;\n};\n\nconst create_state_cell = (x, y, label) => {\n  let cell = new joint.shapes.fsa.State({\n    position: {\n      x: x,\n      y: y\n    },\n    size: {\n      width: 100,\n      height: 100\n    },\n    attrs: {\n      text: {\n        text: label\n      }\n    }\n  });\n  return cell;\n};\n\nexport class Diagram extends Component {\n  constructor(props) {\n    super(props);\n    this.graph = new joint.dia.Graph();\n    this.state_shape_width = 50;\n    this.state_shape_height = 50;\n    this.state_spacing_x = 250;\n    this.state_spacing_y = 150;\n    this.state_per_row = 3;\n    this.cellId2FSMElement = {};\n    this.renderAllStates = this.renderAllStates.bind(this);\n    this.renderAllTransitions = this.renderAllTransitions.bind(this);\n    this.getStateName2CellMap = this.getStateName2CellMap.bind(this);\n    this.clearGraph = this.clearGraph.bind(this);\n  }\n\n  componentDidMount() {\n    const { onClickCell, paperWidth } = this.props;\n    this.$el = $(this.el);\n    console.log(\"paper width is: \" + paperWidth);\n    const paper = new joint.dia.Paper({\n      el: this.$el,\n      width: paperWidth,\n      height: 5 * paperWidth,\n      gridSize: 1,\n      model: this.graph,\n      restrictTranslate: true\n    });\n    paper.on(\"cell:pointerdblclick\", onClickCell);\n    paper.on(\"cell:pointerclick\", onClickCell);\n    this.state_per_row =\n      Math.floor(\n        parseInt(paper.options.width, 10) /\n          (this.state_shape_width + this.state_spacing_x)\n      ) + 1;\n  }\n\n  componentWillUnmount() {\n    this.graph.clear();\n    this.cellId2FSMElement = {};\n  }\n\n  componentDidUpdate() {}\n\n  handleStateCallback(cell) {\n    this.stateCells.push(cell);\n  }\n\n  renderAllStates(fsm) {\n    const stateCells = fsm.getStatesList().map((state, idx) => {\n      const cell = create_state_cell(\n        Math.floor(idx % this.state_per_row) * this.state_spacing_x,\n        Math.floor(idx / this.state_per_row) * this.state_spacing_y,\n        state.getName()\n      );\n      this.addGraphCellWithRef(cell, state);\n      return null;\n    }, this);\n    return stateCells;\n  }\n\n  renderAllTransitions(fsm) {\n    const states = fsm.getStatesList();\n    const stateName2Cell = this.getStateName2CellMap();\n    const transitionCells = states.map(state => {\n      return state.getTransitionsList().map(transition => {\n        const cell = create_transition_cell(\n          stateName2Cell[state.getName()],\n          stateName2Cell[transition.getNextState()],\n          transition.getName()\n        );\n        this.addGraphCellWithRef(cell, transition);\n        return null;\n      }, this);\n    }, this);\n    return transitionCells;\n  }\n\n  getStateName2CellMap() {\n    const stateCells = this.graph.getElements();\n    const stateName2Cell = {};\n    stateCells.map(jointElement => {\n      const stateName = jointElement.attr(\"text/text\");\n      if (stateName in stateName2Cell) {\n        // throw new Error(\"Invalid FSM! Duplicate state name found.\");\n        console.error(\"Duplicate State Name: \" + stateName);\n      } else {\n        stateName2Cell[stateName] = jointElement;\n      }\n      return null;\n    });\n    return stateName2Cell;\n  }\n\n  addGraphCellWithRef(cell, ref) {\n    // addGraphCell add a cell to the graph and record the reference object\n    // this cell represents.\n    this.graph.addCell(cell);\n    this.cellId2FSMElement[cell.id] = ref;\n  }\n\n  clearGraph() {\n    this.graph.clear();\n    this.cellId2FSMElement = {};\n  }\n\n  render() {\n    const { fsm } = this.props;\n    if (fsm != null) {\n      this.clearGraph();\n      this.renderAllStates(fsm);\n      this.renderAllTransitions(fsm);\n    }\n    return <div ref={el => (this.el = el)} />;\n  }\n}\n","import procZoo from \"./processor-zoo.json\";\nimport predZoo from \"./predicate-zoo.json\";\nvar fsmPb = require(\"./wca-state-machine_pb\");\n\nexport const FSMElementType = {\n  STATE: Symbol(\"state\"),\n  TRANSITION: Symbol(\"transition\")\n};\nObject.freeze(FSMElementType);\n\n// only support state and transition two types for now\nexport const getFSMElementType = element => {\n  return typeof element.getProcessorsList === \"function\"\n    ? FSMElementType.STATE\n    : FSMElementType.TRANSITION;\n};\n\nfunction isObject(o) {\n  //How you acomplish this is upto you.\n  return o === Object(o);\n}\n\n// allow array access using nested not annatation\n// obj = {\n//     'a': ['property': 'test']\n// }\n// e.g. obj['a.0.property']\nexport const getPropertyByString = function(o, s) {\n  if (s) {\n    s = s.replace(/^\\./, \"\"); // strip a leading dot\n    var a = s.split(\".\");\n    for (var i = 0, n = a.length; i < n; ++i) {\n      var k = a[i];\n      if (isObject(o) && k in o) {\n        o = o[k];\n      } else {\n        return;\n      }\n    }\n    return o;\n  } else {\n    return;\n  }\n};\n\nexport const findStatePbByName = function(stateName, fsm) {\n  let result = null;\n  fsm.getStatesList().map(state => {\n    if (state.getName() === stateName) {\n      result = state;\n    }\n    return null;\n  });\n  return result;\n};\n\nexport const findTransitionOriginateState = function(transition, fsm) {\n  let result = null;\n  fsm.getStatesList().map(state => {\n    state.getTransitionsList().map(curTransition => {\n      if (curTransition === transition) {\n        result = state;\n      }\n      return null;\n    });\n    return null;\n  });\n  return result;\n};\n\nconst callableToFormValues = function(elementCallables) {\n  let result = [];\n  elementCallables.map(elementCallableItem => {\n    let item = {};\n    item.name = elementCallableItem.getName();\n    item.type = elementCallableItem.getCallableName();\n    let callableArgs = JSON.parse(elementCallableItem.getCallableArgs());\n    item.args = {};\n    Object.keys(callableArgs).map(key => {\n      item.args[key] = callableArgs[key];\n      return null;\n    });\n    result.push(item);\n    return null;\n  });\n  return result;\n};\n\nconst getElementCallables = function(element) {\n  const elementType = getFSMElementType(element);\n  let elementCallables = null;\n  switch (elementType) {\n    case FSMElementType.STATE:\n      elementCallables = element.getProcessorsList();\n      break;\n    case FSMElementType.TRANSITION:\n      elementCallables = element.getPredicatesList();\n      break;\n    default:\n      throw new Error(\n        \"Unsupported Element Type: \" +\n          elementType +\n          \". Failed to add a new element\"\n      );\n  }\n  return elementCallables;\n};\n\nexport const elementToFormValues = function(element, fsm) {\n  const values = {};\n  values.callable = [];\n  const elementType = getFSMElementType(element);\n  // name\n  const name = element.getName();\n  values.name = name;\n  // transition has a few other basic fields\n  if (elementType === FSMElementType.TRANSITION) {\n    values.to = element.getNextState();\n    values.from = findTransitionOriginateState(element, fsm).getName();\n    values.instruction = {};\n    values.instruction.audio = element.getInstruction().getAudio();\n    values.instruction.image = element.getInstruction().getImage();\n    values.instruction.video = element.getInstruction().getVideo();\n  }\n  // handle callables\n  values.callable = callableToFormValues(getElementCallables(element));\n  // add predicates\n  return values;\n};\n\nconst formCallableToElementCallable = function(\n  callbleFormValue,\n  setFunc,\n  callablePbType,\n  zoo\n) {\n  let callableArray = [];\n  for (let idx = 0; idx < callbleFormValue.length; idx++) {\n    let callableValue = callbleFormValue[idx];\n    let callablePb = new callablePbType();\n    callablePb.setName(callableValue.name);\n    callablePb.setCallableName(callableValue.type);\n    // callable args\n    // need to filter out relevant arguments only\n    // since the form may contain irrelevant arguments for other callable type\n    // this is caused by user switching callable types\n    let args = {};\n    Object.keys(zoo[callableValue.type]).map(key => {\n      args[key] = callableValue.args[key];\n      return null;\n    });\n    callablePb.setCallableArgs(JSON.stringify(args));\n    callableArray.push(callablePb);\n  }\n  setFunc(callableArray);\n};\n\n/**\n * Change the name of a state\n * @param {*} element\n * @param {*} newName\n * @param {*} fsm\n */\nconst setStateName = function(element, newName, aux) {\n  const { fsm } = aux;\n  let oldName = element.getName();\n  if (oldName) {\n    // need to fix affected transitions nextState when a state name\n    // changes\n    fsm.getStatesList().map(state => {\n      state.getTransitionsList().map(curTransition => {\n        if (curTransition.getNextState() === oldName) {\n          curTransition.setNextState(newName);\n        }\n        return null;\n      });\n      return null;\n    });\n  }\n  element.setName(newName);\n};\n\nconst setTransitionFromState = function(element, newFromStateName, aux) {\n  const { fsm } = aux;\n  let oldFromState = findTransitionOriginateState(element, fsm);\n  if (newFromStateName !== oldFromState.getName()) {\n    // remove the transition from the old state\n    let index = oldFromState.getTransitionsList().indexOf(element);\n    if (index > -1) {\n      oldFromState.getTransitionsList().splice(index, 1);\n    }\n    // add the transition to the new state\n    const fromStatePb = findStatePbByName(newFromStateName, fsm);\n    fromStatePb.addTransitions(element);\n  }\n};\n\n/**\n * Set element from formValue.\n * @param {} formValue\n * @param {*} element: the FSM element to be set.\n */\nexport const formValuesToElement = function(formValue, fsm, type, initElement) {\n  // create or use appropriate element based on type\n  let element = null;\n  if (initElement === null || initElement === undefined) {\n    switch (type) {\n      case FSMElementType.STATE:\n        element = new fsmPb.State();\n        fsm.addStates(element);\n        break;\n      case FSMElementType.TRANSITION:\n        element = new fsmPb.Transition();\n        // find from state\n        const fromStatePb = findStatePbByName(formValue.from, fsm);\n        fromStatePb.addTransitions(element);\n        break;\n      default:\n        throw new Error(\n          \"Unsupported Element Type: \" + type + \". Failed to add a new element\"\n        );\n    }\n  } else {\n    element = initElement;\n  }\n\n  // deal with type specific fields\n  switch (type) {\n    case FSMElementType.STATE:\n      setStateName(element, formValue[\"name\"], { fsm: fsm });\n      // add processors\n      formCallableToElementCallable(\n        formValue.callable,\n        element.setProcessorsList.bind(element), //bind is needed to pass context\n        fsmPb.Processor,\n        procZoo\n      );\n      break;\n    case FSMElementType.TRANSITION:\n      element.setName(formValue.name);\n      // from state\n      setTransitionFromState(element, formValue.from, {\n        fsm: fsm,\n        oldFromStateName: formValue.from\n      });\n      // to state\n      element.setNextState(formValue.to);\n      // instruction\n      let instPb = new fsmPb.Instruction();\n      instPb.setAudio(formValue.instruction.audio);\n      instPb.setImage(formValue.instruction.image);\n      instPb.setVideo(formValue.instruction.video);\n      element.setInstruction(instPb);\n      // add predicates\n      formCallableToElementCallable(\n        formValue.callable,\n        element.setPredicatesList.bind(element),\n        fsmPb.TransitionPredicate,\n        predZoo\n      );\n      break;\n    default:\n      throw new Error(\n        \"Unsupported Element Type: \" + type + \". Failed to add a new element\"\n      );\n  }\n};\n","import React, { Component } from \"react\";\nimport ReactTable from \"react-table\";\nimport matchSorter from \"match-sorter\";\nimport ListGroup from \"react-bootstrap/lib/ListGroup\";\nimport ListGroupItem from \"react-bootstrap/lib/ListGroupItem\";\nimport { FSMElementType, getFSMElementType } from \"./utils.js\";\nimport \"react-table/react-table.css\";\nimport ReactJson from \"react-json-view\";\n\nconst getColumnWidth = (rows, accessor, headerText) => {\n  const maxWidth = 400;\n  const magicSpacing = 11;\n  const cellLength = Math.max(\n    ...rows.map(row => (`${row[accessor]}` || \"\").length),\n    headerText.length\n  );\n  return Math.min(maxWidth, cellLength * magicSpacing);\n};\n\nclass InfoBox extends Component {\n  constructor(props) {\n    super(props);\n    this.imageInstUrl = null;\n  }\n\n  prepareResource(element) {\n    let res = {};\n    // clear up urls to prevent leaking memories\n    if (this.imageInstUrl !== null) {\n      URL.revokeObjectURL(this.imageInstUrl);\n    }\n    if (element.getInstruction()) {\n      let blob = new Blob([element.getInstruction().getImage()], {\n        type: \"image\"\n      });\n      this.imageInstUrl = URL.createObjectURL(blob);\n      res.imageInstUrl = this.imageInstUrl;\n    }\n    return res;\n  }\n\n  render() {\n    const { element } = this.props;\n    const elementType = getFSMElementType(element);\n\n    // prepare resources\n    let res = {};\n    if (elementType === FSMElementType.TRANSITION) {\n      res = this.prepareResource(element);\n    }\n\n    const tableData =\n      elementType === FSMElementType.STATE\n        ? element.getProcessorsList().map(callableItem => {\n            return {\n              name: callableItem.getName(),\n              callable_name: callableItem.getCallableName(),\n              callable_args: JSON.parse(callableItem.getCallableArgs())\n            };\n          })\n        : element.getPredicatesList().map(callableItem => {\n            return {\n              name: callableItem.getName(),\n              callable_name: callableItem.getCallableName(),\n              callable_args: JSON.parse(callableItem.getCallableArgs())\n            };\n          });\n    const tableColumns = [\n      {\n        Header: \"Name\",\n        accessor: \"name\",\n        filterMethod: (filter, rows) =>\n          matchSorter(rows, filter.value, { keys: [\"name\"] }),\n        filterAll: true,\n        width: getColumnWidth(tableData, \"name\", \"Name\")\n      },\n      {\n        Header: \"Type\",\n        accessor: \"callable_name\",\n        filterMethod: (filter, rows) =>\n          matchSorter(rows, filter.value, {\n            keys: [\"callable_name\"]\n          }),\n        filterAll: true,\n        width: getColumnWidth(tableData, \"callable_name\", \"Type\")\n      },\n      {\n        Header: \"Arguments\",\n        accessor: \"callable_args\",\n        filterMethod: (filter, rows) =>\n          matchSorter(rows, filter.value, {\n            keys: [\"callable_args\"]\n          }),\n        Cell: row => <ReactJson src={row.value} />,\n        filterAll: true\n      }\n    ];\n    return (\n      <ListGroup style={{ width: \"100%\", margin: \"20px\" }}>\n        <ListGroupItem variant=\"secondary\">\n          Name: {element.getName()}\n        </ListGroupItem>\n        <ListGroupItem variant=\"secondary\">\n          Type: {elementType === FSMElementType.STATE ? \"State\" : \"Transition\"}\n        </ListGroupItem>\n        {elementType === FSMElementType.TRANSITION && (\n          <>\n            <ListGroupItem variant=\"secondary\">Instruction</ListGroupItem>\n            <ListGroupItem>\n              Audio: {element.getInstruction().getAudio()}\n            </ListGroupItem>\n            {res.imageInstUrl ? (\n              <ListGroupItem>\n                Image: <img src={res.imageInstUrl} alt=\"instruction\" />\n              </ListGroupItem>\n            ) : (\n              <ListGroupItem>Image: undefined</ListGroupItem>\n            )}\n            <ListGroupItem>\n              Video: {element.getInstruction().getVideo()}\n            </ListGroupItem>\n          </>\n        )}\n        <ListGroupItem variant=\"secondary\">\n          {elementType === FSMElementType.STATE\n            ? \"Processors\"\n            : \"Transition Predicates\"}\n        </ListGroupItem>\n        <ReactTable\n          data={tableData}\n          filterable\n          defaultFilterMethod={(filter, row) =>\n            String(row[filter.id]) === filter.value\n          }\n          columns={tableColumns}\n          defaultPageSize={3}\n        >\n          {(state, makeTable, instance) => {\n            return <div>{makeTable()}</div>;\n          }}\n        </ReactTable>\n      </ListGroup>\n    );\n  }\n}\n\nexport default InfoBox;\n","import React from \"react\";\nimport Button from \"react-bootstrap/lib/Button\";\nimport ButtonGroup from \"react-bootstrap/lib/ButtonGroup\";\nimport Dropdown from \"react-bootstrap/lib/Dropdown\";\nimport Row from \"react-bootstrap/lib/Row\";\nimport Col from \"react-bootstrap/lib/Col\";\nimport FileReaderInput from \"react-file-reader-input\";\nimport { FSMElementType } from \"./utils.js\";\nimport \"./App.css\";\n\nexport const ToolBar = ({\n  onImport,\n  onAdd,\n  onExport,\n  onEdit,\n  onDelete\n}) => {\n  return (\n    <>\n      <Row>\n        <ButtonGroup>\n          <Col sm={3}>\n            <FileReaderInput as=\"buffer\" onChange={onImport}>\n              <Button variant=\"primary\" className=\"fw-btn\">Import</Button>\n            </FileReaderInput>\n          </Col>\n          <Col sm={3}>\n            <Button variant=\"primary\" onClick={onExport} className=\"fw-btn\">\n              Export\n          </Button>\n          </Col>\n          <Col sm={3}>\n            <Dropdown>\n              <Dropdown.Toggle id=\"dropdown-add\" className=\"fw-btn\">Add</Dropdown.Toggle>\n              <Dropdown.Menu>\n                <Dropdown.Item onClick={() => onAdd(FSMElementType.STATE)}>State</Dropdown.Item>\n                <Dropdown.Item onClick={() => onAdd(FSMElementType.TRANSITION)}>Transition</Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </Col>\n          <Col sm={3}>\n            <Button variant=\"primary\" onClick={onEdit} className=\"fw-btn\">\n              Edit\n          </Button>\n          </Col>\n          <Col sm={3}>\n            <Button variant=\"primary\" onClick={onDelete} className=\"fw-btn\">\n              Delete\n          </Button>\n          </Col>\n        </ButtonGroup>\n      </Row>\n    </>\n  );\n};\n","import React, { Component } from \"react\";\nimport Modal from \"react-bootstrap/lib/Modal\";\nimport Button from \"react-bootstrap/lib/Button\";\nimport Form from \"react-bootstrap/lib/Form\";\nimport Col from \"react-bootstrap/lib/Col\";\nimport Row from \"react-bootstrap/lib/Row\";\nimport { Formik, Form as FormikForm, Field, FieldArray } from \"formik\";\nimport FileReaderInput from \"react-file-reader-input\";\nimport \"./App.css\";\nimport Select from \"react-select\";\nimport procZoo from \"./processor-zoo.json\";\nimport predZoo from \"./predicate-zoo.json\";\nimport {\n  FSMElementType,\n  getPropertyByString,\n  elementToFormValues\n} from \"./utils.js\";\n\nvar DEBUG = true;\n\n/** Helper function to create options for Select elements\n * from a pre-defined callable zoo (procZoo or predZoo)\n *\n * @param {*} zoo\n */\nconst getZooOptions = zoo => {\n  return Object.keys(zoo).map(key => {\n    return { value: key, label: key };\n  });\n};\n\n/** Custom validate functions for Formik forms\n *\n * Formik has a wierd return requirement\n * if invalid, return a string containing the error message or return undefined.\n *\n * return null if valid, a string if invalid\n * @param {*} param0\n */\nconst isEmpty = value => {\n  let errorMessage = null;\n  if (value === undefined || value === null || !/^.+$/i.test(value)) {\n    errorMessage = \"Required. Cannot be empty.\";\n  }\n  return errorMessage;\n};\n\n/**\n * return null if valid, a string if invalid\n * @param {*} value\n * @param {*} existingItemArray\n */\nconst isDuplicate = (value, existingItemArray) => {\n  let errorMessage = null;\n  if (\n    value === undefined ||\n    value === null ||\n    existingItemArray.includes(value)\n  ) {\n    errorMessage = \"Duplicate name. Names must be unique.\";\n  }\n  return errorMessage;\n};\n\n/**\n * return null if valid, a string if invalid\n */\nconst isUniqueName = (value, existingItemArray) => {\n  return isEmpty(value) || isDuplicate(value, existingItemArray) || null;\n};\n\n/*\nCustomize the look of form fields using bootstrap.\nThese following React components should be passed as the \"component\"\nproperty of a Formik field.\n*/\nconst BSFormikField = ({\n  field, // { name, value, onChange, onBlur }\n  type,\n  label,\n  placeholder,\n  defaultValue,\n  isValid,\n  ...props\n}) => (\n  <Form.Group as={Row}>\n    <Form.Label column>{label}</Form.Label>\n    <Col>\n      <Form.Control\n        required\n        {...field}\n        {...props}\n        type={type}\n        placeholder={placeholder}\n        value={field.value || defaultValue || \"\"} // to supress uncontrolled to controlled warning\n        isValid={isValid}\n      />\n    </Col>\n  </Form.Group>\n);\n\nclass ImageUploadField extends Component {\n  constructor(props) {\n    super(props);\n    this.imageInstUrl = null;\n  }\n\n  prepareResource(imageBytes) {\n    // clear up urls to prevent leaking memories\n    if (this.imageInstUrl !== null) {\n      URL.revokeObjectURL(this.imageInstUrl);\n    }\n    let blob = new Blob([imageBytes], {\n      type: \"image\"\n    });\n    this.imageInstUrl = URL.createObjectURL(blob);\n    return {\n      imageInstUrl: this.imageInstUrl\n    };\n  }\n\n  render() {\n    const { field, form, label, } = this.props;\n    let res = {};\n    if (field.value) {\n      res = this.prepareResource(field.value);\n    }\n    return (\n      <Form.Group as={Row}>\n        <Form.Label column>{label}</Form.Label>\n        {res.imageInstUrl && (\n          <Form.Label column sm={1}>\n            <img\n              src={res.imageInstUrl}\n              alt=\"instruction\"\n              style={{ width: 40, height: 40 }}\n            />\n          </Form.Label>\n        )}\n        <Col>\n          <FileReaderInput\n            as=\"buffer\"\n            onChange={(e, fileArray) => {\n              fileArray.forEach(result => {\n                const e = result[0];\n                let fileContent = e.target.result;\n                form.setFieldValue(field.name, fileContent);\n              });\n            }}\n          >\n            <Button variant=\"light\" className=\"fw-btn\">\n              New Image\n            </Button>\n          </FileReaderInput>\n        </Col>\n      </Form.Group>\n    );\n  }\n}\n\n/** Custom the look of a Formik Select field with react-select\n *\n * @param {*} param0\n */\nconst SelectFormikField = ({\n  field,\n  form, // values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n  label,\n  selectOptions,\n  ...props\n}) => (\n  <Form.Group as={Row}>\n    <Form.Label column>{label}</Form.Label>\n    <Col>\n      <Select\n        {...field}\n        {...props}\n        options={selectOptions}\n        name={field.name}\n        value={\n          selectOptions\n            ? selectOptions.find(option => option.value === field.value)\n            : \"\"\n        }\n        onChange={option => form.setFieldValue(field.name, option.value)}\n        onBlur={field.onBlur}\n      />\n    </Col>\n  </Form.Group>\n);\n\nconst CallableNameField = ({\n  field, // name, value, onChange, onBlur\n  ...props\n}) => (\n  <BSFormikField\n    field={field}\n    type=\"text\"\n    label=\"name\"\n    placeholder=\"Enter Name\"\n    {...props}\n  />\n);\n\nconst CallableArgField = ({\n  field,\n  key, // unused. not passed to the field. just to suppress parent's react list warning\n  label,\n  placeholder,\n  ...props\n}) => (\n  <BSFormikField\n    field={field}\n    type=\"text\"\n    label={label}\n    placeholder={placeholder}\n    {...props}\n  />\n);\n\nconst addFieldError = (errors, fieldName) => {\n  if (getPropertyByString(errors, fieldName)) {\n    return (\n      <div className=\"text-danger\">\n        {getPropertyByString(errors, fieldName)}\n      </div>\n    );\n  } else {\n    return null;\n  }\n};\n\n/*\nFunctions to create a group of form field to present a \"callable\".\nThe UIs to create a \"callable\" consist of following form fields:\n1. callable name\n2. callable type\n3. A field for each callable argument (loaded from callable zoos)\n*/\nconst createCallableMultiFields = (\n  callableTitle,\n  zoo,\n  values,\n  index,\n  arrayHelpers,\n  errors\n) => {\n  const zooOptions = getZooOptions(zoo);\n  return (\n    <div key={index} className=\"border\">\n      <h6>{callableTitle}</h6>\n      <Field\n        name={`callable.${index}.name`} // add values.callable[index].name\n        component={CallableNameField}\n        validate={isEmpty}\n      />\n      {addFieldError(errors, `callable.${index}.name`)}\n      <Field\n        name={`callable.${index}.type`} // add values.callable[index].name\n        component={props => (\n          <SelectFormikField\n            {...props}\n            label=\"Type\"\n            selectOptions={zooOptions}\n          />\n        )}\n        validate={isEmpty}\n      />\n      {addFieldError(errors, `callable.${index}.type`)}\n      {getPropertyByString(values, `callable.${index}.type`) &&\n        createCallableArgMultiFields(\n          zoo[values[\"callable\"][index][\"type\"]],\n          index,\n          errors\n        )}\n      {DEBUG && <p>{JSON.stringify(values)}</p>}\n      <Form.Row>\n        <Button\n          variant=\"danger\"\n          className=\"btn-block\"\n          onClick={() => arrayHelpers.remove({ index })}\n        >\n          Delete\n        </Button>\n      </Form.Row>\n    </div>\n  );\n};\n\n/*\nCreate a field for each callable argument.\n*/\nconst createCallableArgMultiFields = (args, index, errors) => {\n  const argFields = Object.keys(args).map((key, argIndex) => {\n    return (\n      <div key={index + \".arg.\" + argIndex}>\n        <Field\n          name={`callable.${index}.args.${key}`} // add values.callable[0].name\n          component={CallableArgField}\n          label={key}\n          placeholder={args[key]}\n          validate={isEmpty}\n        />\n        {addFieldError(errors, `callable.${index}.args.${key}`)}\n      </div>\n    );\n  });\n  return argFields;\n};\n\n/** Create transition basic fields including\n * from and to state, and instructions.\n *\n * @param {*} values\n */\nconst createTransitionBasicFields = (fsm, form, errors) => {\n  const fsmStateOptions = fsm.getStatesList().map(state => {\n    return { value: state.getName(), label: state.getName() };\n  });\n  return (\n    <>\n      <Field\n        name=\"from\"\n        component={props => (\n          <SelectFormikField\n            {...props}\n            label=\"From State\"\n            selectOptions={fsmStateOptions}\n          />\n        )}\n        validate={isEmpty}\n      />\n      {addFieldError(errors, \"from\")}\n      <Field\n        name=\"to\"\n        component={props => (\n          <SelectFormikField\n            {...props}\n            label=\"To State\"\n            selectOptions={fsmStateOptions}\n          />\n        )}\n        validate={isEmpty}\n      />\n      {addFieldError(errors, \"to\")}\n      <Field\n        name=\"instruction.audio\"\n        component={props => (\n          <BSFormikField {...props} type=\"text\" label=\"Audio Instruction\" />\n        )}\n      />\n      <Field\n        name=\"instruction.image\"\n        component={props => (\n          <ImageUploadField label=\"Image Instruction\" {...props} />\n        )}\n      />\n      <Field\n        name=\"instruction.video\"\n        component={props => (\n          <BSFormikField {...props} type=\"text\" label=\"Video Instruction\" />\n        )}\n      />\n    </>\n  );\n};\n\n/**\n * A Modal used to create a new FSM element.\n * The core of the modal is a Formik form that captures\n * the user-inputted properties for the element\n */\nclass ElementModal extends Component {\n  constructor(props) {\n    super(props);\n    this.form = React.createRef();\n    this.onHide = this.onHide.bind(this);\n  }\n\n  onHide() {\n    // do nothing\n  }\n\n  getInitModalValuesFromElement(element, fsm) {\n    if (element === null) {\n      return {\n        callable: []\n      };\n    } else {\n      return elementToFormValues(element, fsm);\n    }\n  }\n\n  render() {\n    const {\n      show,\n      type,\n      fsm,\n      onModalCancel,\n      onModalSave,\n      initElement\n    } = this.props;\n\n    let title,\n      callableTitle = \"\";\n    let callableZoo = null;\n    let callableButtonValue = \"\";\n    switch (type) {\n      case FSMElementType.STATE:\n        title = \"State\";\n        callableTitle = \"New Processor\";\n        callableButtonValue = \"Add Processor\";\n        callableZoo = procZoo;\n        break;\n      case FSMElementType.TRANSITION:\n        title = \"Transition\";\n        callableTitle = \"New Predicate\";\n        callableButtonValue = \"Add Predicate\";\n        callableZoo = predZoo;\n        break;\n      default:\n        throw new Error(\n          \"Unsupported Element Type: \" + type + \". Failed to add a new element\"\n        );\n    }\n\n    const initValues = this.getInitModalValuesFromElement(initElement, fsm);\n\n    return (\n      <Modal show={show} onHide={this.onHide}>\n        <Modal.Header>\n          <Modal.Title>{title}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Formik\n            ref={this.form}\n            initialValues={initValues}\n            onSubmit={(values, { props, setSubmitting }) => {\n              onModalSave(type, values, initElement);\n              setSubmitting(false);\n            }}\n            render={({ form, values, errors }) => (\n              <FormikForm>\n                <FieldArray\n                  name=\"callable\"\n                  render={arrayHelpers => {\n                    return (\n                      <>\n                        {type === FSMElementType.STATE && (\n                          <>\n                            <Field\n                              name=\"name\"\n                              component={BSFormikField}\n                              type=\"text\"\n                              label=\"Name\"\n                              validate={value => {\n                                if (\n                                  initElement === null ||\n                                  initElement === undefined\n                                ) {\n                                  const existingItemArray = fsm\n                                    .getStatesList()\n                                    .map(state => state.getName());\n                                  return isUniqueName(value, existingItemArray);\n                                } else {\n                                  return isEmpty(value);\n                                }\n                              }}\n                            />\n                            {addFieldError(errors, \"name\")}\n                          </>\n                        )}\n                        {type === FSMElementType.TRANSITION && (\n                          <>\n                            <Field\n                              name=\"name\"\n                              component={BSFormikField}\n                              type=\"text\"\n                              label=\"Name\"\n                              validate={isEmpty}\n                            />\n                            {addFieldError(errors, \"name\")}\n                            {createTransitionBasicFields(fsm, form, errors)}\n                          </>\n                        )}\n                        {values.callable.map((eachCallable, index) =>\n                          createCallableMultiFields(\n                            callableTitle,\n                            callableZoo,\n                            values,\n                            index,\n                            arrayHelpers,\n                            errors\n                          )\n                        )}\n                        <Form.Row>\n                          <Button\n                            variant=\"info\"\n                            className=\"btn-block\"\n                            onClick={() => arrayHelpers.push({})}\n                          >\n                            {callableButtonValue}\n                          </Button>\n                        </Form.Row>\n                      </>\n                    );\n                  }}\n                />\n              </FormikForm>\n            )}\n          />\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={onModalCancel}>\n            Close\n          </Button>\n          <Button\n            variant=\"primary\"\n            onClick={e => {\n              this.form.current.submitForm();\n            }}\n          >\n            Save Changes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\nexport default ElementModal;\n","import React, { Component } from \"react\";\nimport Container from \"react-bootstrap/lib/Container\";\nimport Row from \"react-bootstrap/lib/Row\";\nimport Col from \"react-bootstrap/lib/Col\";\nimport Alert from \"react-bootstrap/lib/Alert\";\nimport { Diagram } from \"./diagram.js\";\nimport \"./App.css\";\nimport InfoBox from \"./infoBox.js\";\nimport { ToolBar } from \"./toolbar.js\";\nimport {\n  FSMElementType,\n  getFSMElementType,\n  formValuesToElement\n} from \"./utils.js\";\nimport ElementModal from \"./elementModal.js\";\nimport saveAs from \"file-saver\";\nvar fsmPb = require(\"./wca-state-machine_pb\");\n\nfunction loadFsm(fsmData) {\n  let fsm = null;\n  try {\n    fsm = new fsmPb.StateMachine.deserializeBinary(fsmData);\n  } catch (err) {\n    throw err;\n  }\n  return fsm;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.diagramRef = React.createRef();\n    this.diagramContainerRef = React.createRef();\n    this.alert = this.alert.bind(this);\n    this.onImport = this.onImport.bind(this);\n    this.onExport = this.onExport.bind(this);\n    this.onAdd = this.onAdd.bind(this);\n    this.onDelete = this.onDelete.bind(this);\n    this.onEdit = this.onEdit.bind(this);\n    this.onClickCell = this.onClickCell.bind(this);\n    this.onModalCancel = this.onModalCancel.bind(this);\n    this.onModalSave = this.onModalSave.bind(this);\n    this.state = {\n      fsm: new fsmPb.StateMachine(),\n      curFSMElement: null,\n      modalInitElement: null,\n      alertMsg: {\n        show: true,\n        type: \"info\",\n        msg: \"Welcome to State Machine Editor!\"\n      },\n      showNewElementModal: false,\n      newElementModalType: null\n    };\n  }\n\n  render() {\n    return (\n      <Container fluid>\n        <h1>State Machine Visualizer with React</h1>\n        {this.state.alertMsg.msg !== \"\" && (\n          <Alert dismissible variant={this.state.alertMsg.type}>\n            {this.state.alertMsg.msg}\n          </Alert>\n        )}\n        <Row>\n          <Col sm={6} ref={this.diagramContainerRef} style={{ backgroundColor: \"lavender\" }}>\n            <h4>Diagram</h4>\n            <Diagram\n              fsm={this.state.fsm}\n              onClickCell={this.onClickCell}\n              ref={this.diagramRef}\n              paperWidth={window.innerWidth/2} // half of current window's inner width\n            />\n          </Col>\n          <Col sm={6}>\n            <ToolBar\n              onImport={this.onImport}\n              onAdd={this.onAdd}\n              onExport={this.onExport}\n              onDelete={this.onDelete}\n              onEdit={this.onEdit}\n            />\n            {this.state.curFSMElement && (\n              <Row>\n                <InfoBox\n                  element={this.state.curFSMElement}\n                  style={{ width: \"100%\" }}\n                />\n              </Row>\n            )}\n          </Col>\n        </Row>\n        <footer>\n          <Container>\n            <span className=\"text-muted\">\n              Copyright Carnegie Mellon University\n            </span>\n          </Container>\n        </footer>\n        {this.state.showNewElementModal && (\n          <ElementModal\n            fsm={this.state.fsm} // new elements may depend on existing elements (e.g. adding a transition between two states)\n            show={this.state.showNewElementModal}\n            type={this.state.newElementModalType}\n            initElement={this.state.modalInitElement} // if element is not null, then edit the element\n            onModalSave={this.onModalSave}\n            onModalCancel={this.onModalCancel}\n          />\n        )}\n      </Container>\n    );\n  }\n\n  alert(type, msg) {\n    this.setState({\n      alertMsg: {\n        type: type,\n        msg: msg\n      }\n    });\n  }\n\n  // toolbar callbacks\n  onImport(e, fileArray) {\n    fileArray.forEach(result => {\n      const e = result[0];\n      let fileContent = e.target.result;\n      let fsm = null;\n      try {\n        fsm = loadFsm(fileContent);\n        this.setState({ fsm: fsm, curFSMElement: null });\n        this.alert(\"info\", \"Success! State machine imported.\");\n      } catch (err) {\n        this.alert(\n          \"danger\",\n          \"Incorrect File Format. Failed to import the file. \\n\" + err\n        );\n      }\n    });\n  }\n\n  onExport() {\n    const fsmPb = this.state.fsm;\n    if (fsmPb.getStatesList().length === 0) {\n      this.alert(\"danger\", \"Empty state machine! There is nothing to save. \\n\");\n    } else {\n      // TODO(junjuew): fix start state. It should be marked by users\n      // instead of being the first state added\n      if (fsmPb.getStartState() === \"\") {\n        fsmPb.setStartState(fsmPb.getStatesList()[0].getName());\n      }\n      let fsmPbSerialized = fsmPb.serializeBinary();\n      let blob = new Blob([fsmPbSerialized], {\n        type: \"application/octet-stream\"\n      });\n      saveAs(blob, \"app.pbfsm\");\n    }\n  }\n\n  onAdd(type) {\n    this.setState({ showNewElementModal: true, newElementModalType: type });\n  }\n\n  isElementSafeToDelete(element) {\n    const fsm = this.state.fsm;\n    const elementType = getFSMElementType(element);\n    let isSafe = true;\n    switch (elementType) {\n      case FSMElementType.STATE:\n        // check if there are transitions starting from this state\n        if (element.getTransitionsList().length > 0) isSafe = false;\n        // check if there are transitions ending at this state\n        fsm.getStatesList().map(state => {\n          state.getTransitionsList().map(transition => {\n            if (transition.getNextState() === element.getName()) {\n              isSafe = false;\n            }\n            return null;\n          });\n          return null;\n        });\n        return isSafe;\n      case FSMElementType.TRANSITION:\n        return isSafe;\n      default:\n        throw new Error(\"Unsupported Element Type: \" + elementType);\n    }\n  }\n\n  deleteStatePb(element) {\n    const fsm = this.state.fsm;\n    if (this.isElementSafeToDelete(element)) {\n      const elementIdx = fsm.getStatesList().indexOf(element);\n      fsm.getStatesList().splice(elementIdx, elementIdx + 1);\n      this.setState({ fsm: fsm, curFSMElement: null });\n    } else {\n      return this.alert(\n        \"danger\",\n        \"A state cannot be deleted unless all transitions to/from it have been deleted.\"\n      );\n    }\n  }\n\n  deleteTransitionPb(element) {\n    const fsm = this.state.fsm;\n    if (this.isElementSafeToDelete(element)) {\n      // find the state this transition belons to and removes it from\n      // the transitions list\n      fsm.getStatesList().map(state => {\n        const elementIdx = state.getTransitionsList().indexOf(element);\n        if (elementIdx >= 0) {\n          state.getTransitionsList().splice(elementIdx, elementIdx + 1);\n        }\n        return null;\n      });\n      this.setState({ fsm: fsm, curFSMElement: null });\n    } else {\n      return this.alert(\"danger\", \"The transition cannot be safely deleted\");\n    }\n  }\n\n  hasCurElement() {\n    const element = this.state.curFSMElement;\n    if (element === null) {\n      this.alert(\n        \"danger\",\n        \"There is no element selected. Double-click to select an element.\"\n      );\n      return false;\n    }\n    return true;\n  }\n\n  onEdit() {\n    if (this.hasCurElement()) {\n      const element = this.state.curFSMElement;\n      const elementType = getFSMElementType(element);\n      this.setState({\n        showNewElementModal: true,\n        newElementModalType: elementType,\n        modalInitElement: element\n      });\n    }\n  }\n\n  onDelete() {\n    if (this.hasCurElement()) {\n      const element = this.state.curFSMElement;\n      const elementType = getFSMElementType(element);\n      switch (elementType) {\n        case FSMElementType.STATE:\n          this.deleteStatePb(element);\n          break;\n        case FSMElementType.TRANSITION:\n          this.deleteTransitionPb(element);\n          break;\n        default:\n          throw new Error(\"Unsupported Element Type: \" + elementType);\n      }\n    }\n  }\n\n  // diagram callbacks\n  onClickCell(elementView) {\n    const fsmElement = this.diagramRef.current.cellId2FSMElement[\n      elementView.model.id\n    ];\n    this.setState({\n      curFSMElement: fsmElement\n    });\n  }\n\n  onModalSave(type, formValue, initElement) {\n    const fsm = this.state.fsm;\n    formValuesToElement(formValue, fsm, type, initElement);\n    this.setState({ fsm: fsm });\n    this.setState({ showNewElementModal: false, modalInitElement: null });\n  }\n\n  onModalCancel() {\n    this.setState({ showNewElementModal: false, modalInitElement: null });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/* eslint-disable */\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = Function('return this')();\n\ngoog.exportSymbol('proto.Instruction', null, global);\ngoog.exportSymbol('proto.Processor', null, global);\ngoog.exportSymbol('proto.State', null, global);\ngoog.exportSymbol('proto.StateMachine', null, global);\ngoog.exportSymbol('proto.Transition', null, global);\ngoog.exportSymbol('proto.TransitionPredicate', null, global);\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.TransitionPredicate = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.TransitionPredicate, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.TransitionPredicate.displayName = 'proto.TransitionPredicate';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.TransitionPredicate.prototype.toObject = function(opt_includeInstance) {\n  return proto.TransitionPredicate.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.TransitionPredicate} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.TransitionPredicate.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    name: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    callableName: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    callableKwargsMap: (f = msg.getCallableKwargsMap()) ? f.toObject(includeInstance, undefined) : [],\n    callableArgs: jspb.Message.getFieldWithDefault(msg, 4, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.TransitionPredicate}\n */\nproto.TransitionPredicate.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.TransitionPredicate;\n  return proto.TransitionPredicate.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.TransitionPredicate} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.TransitionPredicate}\n */\nproto.TransitionPredicate.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCallableName(value);\n      break;\n    case 3:\n      var value = msg.getCallableKwargsMap();\n      reader.readMessage(value, function(message, reader) {\n        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, \"\");\n         });\n      break;\n    case 4:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCallableArgs(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.TransitionPredicate.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.TransitionPredicate.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.TransitionPredicate} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.TransitionPredicate.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getName();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getCallableName();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getCallableKwargsMap(true);\n  if (f && f.getLength() > 0) {\n    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);\n  }\n  f = message.getCallableArgs();\n  if (f.length > 0) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string name = 1;\n * @return {string}\n */\nproto.TransitionPredicate.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.TransitionPredicate.prototype.setName = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string callable_name = 2;\n * @return {string}\n */\nproto.TransitionPredicate.prototype.getCallableName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.TransitionPredicate.prototype.setCallableName = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * map<string, bytes> callable_kwargs = 3;\n * @param {boolean=} opt_noLazyCreate Do not create the map if\n * empty, instead returning `undefined`\n * @return {!jspb.Map<string,!(string|Uint8Array)>}\n */\nproto.TransitionPredicate.prototype.getCallableKwargsMap = function(opt_noLazyCreate) {\n  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (\n      jspb.Message.getMapField(this, 3, opt_noLazyCreate,\n      null));\n};\n\n\nproto.TransitionPredicate.prototype.clearCallableKwargsMap = function() {\n  this.getCallableKwargsMap().clear();\n};\n\n\n/**\n * optional string callable_args = 4;\n * @return {string}\n */\nproto.TransitionPredicate.prototype.getCallableArgs = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/** @param {string} value */\nproto.TransitionPredicate.prototype.setCallableArgs = function(value) {\n  jspb.Message.setProto3StringField(this, 4, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Instruction = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Instruction, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Instruction.displayName = 'proto.Instruction';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Instruction.prototype.toObject = function(opt_includeInstance) {\n  return proto.Instruction.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Instruction} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Instruction.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    name: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    audio: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    image: msg.getImage_asB64(),\n    video: msg.getVideo_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Instruction}\n */\nproto.Instruction.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Instruction;\n  return proto.Instruction.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Instruction} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Instruction}\n */\nproto.Instruction.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setAudio(value);\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setImage(value);\n      break;\n    case 4:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setVideo(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Instruction.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Instruction.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Instruction} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Instruction.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getName();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getAudio();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getImage_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n  f = message.getVideo_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string name = 1;\n * @return {string}\n */\nproto.Instruction.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.Instruction.prototype.setName = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string audio = 2;\n * @return {string}\n */\nproto.Instruction.prototype.getAudio = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.Instruction.prototype.setAudio = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional bytes image = 3;\n * @return {!(string|Uint8Array)}\n */\nproto.Instruction.prototype.getImage = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes image = 3;\n * This is a type-conversion wrapper around `getImage()`\n * @return {string}\n */\nproto.Instruction.prototype.getImage_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getImage()));\n};\n\n\n/**\n * optional bytes image = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getImage()`\n * @return {!Uint8Array}\n */\nproto.Instruction.prototype.getImage_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getImage()));\n};\n\n\n/** @param {!(string|Uint8Array)} value */\nproto.Instruction.prototype.setImage = function(value) {\n  jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n/**\n * optional bytes video = 4;\n * @return {!(string|Uint8Array)}\n */\nproto.Instruction.prototype.getVideo = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * optional bytes video = 4;\n * This is a type-conversion wrapper around `getVideo()`\n * @return {string}\n */\nproto.Instruction.prototype.getVideo_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getVideo()));\n};\n\n\n/**\n * optional bytes video = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getVideo()`\n * @return {!Uint8Array}\n */\nproto.Instruction.prototype.getVideo_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getVideo()));\n};\n\n\n/** @param {!(string|Uint8Array)} value */\nproto.Instruction.prototype.setVideo = function(value) {\n  jspb.Message.setProto3BytesField(this, 4, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Transition = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.Transition.repeatedFields_, null);\n};\ngoog.inherits(proto.Transition, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Transition.displayName = 'proto.Transition';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.Transition.repeatedFields_ = [2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Transition.prototype.toObject = function(opt_includeInstance) {\n  return proto.Transition.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Transition} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Transition.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    name: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    predicatesList: jspb.Message.toObjectList(msg.getPredicatesList(),\n    proto.TransitionPredicate.toObject, includeInstance),\n    instruction: (f = msg.getInstruction()) && proto.Instruction.toObject(includeInstance, f),\n    nextState: jspb.Message.getFieldWithDefault(msg, 4, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Transition}\n */\nproto.Transition.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Transition;\n  return proto.Transition.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Transition} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Transition}\n */\nproto.Transition.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    case 2:\n      var value = new proto.TransitionPredicate;\n      reader.readMessage(value,proto.TransitionPredicate.deserializeBinaryFromReader);\n      msg.addPredicates(value);\n      break;\n    case 3:\n      var value = new proto.Instruction;\n      reader.readMessage(value,proto.Instruction.deserializeBinaryFromReader);\n      msg.setInstruction(value);\n      break;\n    case 4:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setNextState(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Transition.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Transition.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Transition} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Transition.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getName();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getPredicatesList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      2,\n      f,\n      proto.TransitionPredicate.serializeBinaryToWriter\n    );\n  }\n  f = message.getInstruction();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.Instruction.serializeBinaryToWriter\n    );\n  }\n  f = message.getNextState();\n  if (f.length > 0) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string name = 1;\n * @return {string}\n */\nproto.Transition.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.Transition.prototype.setName = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * repeated TransitionPredicate predicates = 2;\n * @return {!Array<!proto.TransitionPredicate>}\n */\nproto.Transition.prototype.getPredicatesList = function() {\n  return /** @type{!Array<!proto.TransitionPredicate>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.TransitionPredicate, 2));\n};\n\n\n/** @param {!Array<!proto.TransitionPredicate>} value */\nproto.Transition.prototype.setPredicatesList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n\n\n/**\n * @param {!proto.TransitionPredicate=} opt_value\n * @param {number=} opt_index\n * @return {!proto.TransitionPredicate}\n */\nproto.Transition.prototype.addPredicates = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.TransitionPredicate, opt_index);\n};\n\n\nproto.Transition.prototype.clearPredicatesList = function() {\n  this.setPredicatesList([]);\n};\n\n\n/**\n * optional Instruction instruction = 3;\n * @return {?proto.Instruction}\n */\nproto.Transition.prototype.getInstruction = function() {\n  return /** @type{?proto.Instruction} */ (\n    jspb.Message.getWrapperField(this, proto.Instruction, 3));\n};\n\n\n/** @param {?proto.Instruction|undefined} value */\nproto.Transition.prototype.setInstruction = function(value) {\n  jspb.Message.setWrapperField(this, 3, value);\n};\n\n\nproto.Transition.prototype.clearInstruction = function() {\n  this.setInstruction(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Transition.prototype.hasInstruction = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * optional string next_state = 4;\n * @return {string}\n */\nproto.Transition.prototype.getNextState = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/** @param {string} value */\nproto.Transition.prototype.setNextState = function(value) {\n  jspb.Message.setProto3StringField(this, 4, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Processor = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Processor, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Processor.displayName = 'proto.Processor';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Processor.prototype.toObject = function(opt_includeInstance) {\n  return proto.Processor.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Processor} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Processor.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    name: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    callableName: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    callableKwargsMap: (f = msg.getCallableKwargsMap()) ? f.toObject(includeInstance, undefined) : [],\n    callableArgs: jspb.Message.getFieldWithDefault(msg, 4, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Processor}\n */\nproto.Processor.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Processor;\n  return proto.Processor.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Processor} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Processor}\n */\nproto.Processor.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCallableName(value);\n      break;\n    case 3:\n      var value = msg.getCallableKwargsMap();\n      reader.readMessage(value, function(message, reader) {\n        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, \"\");\n         });\n      break;\n    case 4:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCallableArgs(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Processor.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Processor.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Processor} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Processor.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getName();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getCallableName();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getCallableKwargsMap(true);\n  if (f && f.getLength() > 0) {\n    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);\n  }\n  f = message.getCallableArgs();\n  if (f.length > 0) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string name = 1;\n * @return {string}\n */\nproto.Processor.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.Processor.prototype.setName = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string callable_name = 2;\n * @return {string}\n */\nproto.Processor.prototype.getCallableName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.Processor.prototype.setCallableName = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * map<string, bytes> callable_kwargs = 3;\n * @param {boolean=} opt_noLazyCreate Do not create the map if\n * empty, instead returning `undefined`\n * @return {!jspb.Map<string,!(string|Uint8Array)>}\n */\nproto.Processor.prototype.getCallableKwargsMap = function(opt_noLazyCreate) {\n  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (\n      jspb.Message.getMapField(this, 3, opt_noLazyCreate,\n      null));\n};\n\n\nproto.Processor.prototype.clearCallableKwargsMap = function() {\n  this.getCallableKwargsMap().clear();\n};\n\n\n/**\n * optional string callable_args = 4;\n * @return {string}\n */\nproto.Processor.prototype.getCallableArgs = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/** @param {string} value */\nproto.Processor.prototype.setCallableArgs = function(value) {\n  jspb.Message.setProto3StringField(this, 4, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.State = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.State.repeatedFields_, null);\n};\ngoog.inherits(proto.State, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.State.displayName = 'proto.State';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.State.repeatedFields_ = [2,3];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.State.prototype.toObject = function(opt_includeInstance) {\n  return proto.State.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.State} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.State.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    name: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    processorsList: jspb.Message.toObjectList(msg.getProcessorsList(),\n    proto.Processor.toObject, includeInstance),\n    transitionsList: jspb.Message.toObjectList(msg.getTransitionsList(),\n    proto.Transition.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.State}\n */\nproto.State.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.State;\n  return proto.State.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.State} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.State}\n */\nproto.State.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    case 2:\n      var value = new proto.Processor;\n      reader.readMessage(value,proto.Processor.deserializeBinaryFromReader);\n      msg.addProcessors(value);\n      break;\n    case 3:\n      var value = new proto.Transition;\n      reader.readMessage(value,proto.Transition.deserializeBinaryFromReader);\n      msg.addTransitions(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.State.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.State.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.State} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.State.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getName();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getProcessorsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      2,\n      f,\n      proto.Processor.serializeBinaryToWriter\n    );\n  }\n  f = message.getTransitionsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      3,\n      f,\n      proto.Transition.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional string name = 1;\n * @return {string}\n */\nproto.State.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.State.prototype.setName = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * repeated Processor processors = 2;\n * @return {!Array<!proto.Processor>}\n */\nproto.State.prototype.getProcessorsList = function() {\n  return /** @type{!Array<!proto.Processor>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.Processor, 2));\n};\n\n\n/** @param {!Array<!proto.Processor>} value */\nproto.State.prototype.setProcessorsList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n\n\n/**\n * @param {!proto.Processor=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Processor}\n */\nproto.State.prototype.addProcessors = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Processor, opt_index);\n};\n\n\nproto.State.prototype.clearProcessorsList = function() {\n  this.setProcessorsList([]);\n};\n\n\n/**\n * repeated Transition transitions = 3;\n * @return {!Array<!proto.Transition>}\n */\nproto.State.prototype.getTransitionsList = function() {\n  return /** @type{!Array<!proto.Transition>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.Transition, 3));\n};\n\n\n/** @param {!Array<!proto.Transition>} value */\nproto.State.prototype.setTransitionsList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 3, value);\n};\n\n\n/**\n * @param {!proto.Transition=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Transition}\n */\nproto.State.prototype.addTransitions = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Transition, opt_index);\n};\n\n\nproto.State.prototype.clearTransitionsList = function() {\n  this.setTransitionsList([]);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.StateMachine = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.StateMachine.repeatedFields_, null);\n};\ngoog.inherits(proto.StateMachine, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.StateMachine.displayName = 'proto.StateMachine';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.StateMachine.repeatedFields_ = [2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.StateMachine.prototype.toObject = function(opt_includeInstance) {\n  return proto.StateMachine.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.StateMachine} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.StateMachine.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    name: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    statesList: jspb.Message.toObjectList(msg.getStatesList(),\n    proto.State.toObject, includeInstance),\n    assetsMap: (f = msg.getAssetsMap()) ? f.toObject(includeInstance, undefined) : [],\n    startState: jspb.Message.getFieldWithDefault(msg, 4, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.StateMachine}\n */\nproto.StateMachine.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.StateMachine;\n  return proto.StateMachine.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.StateMachine} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.StateMachine}\n */\nproto.StateMachine.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    case 2:\n      var value = new proto.State;\n      reader.readMessage(value,proto.State.deserializeBinaryFromReader);\n      msg.addStates(value);\n      break;\n    case 3:\n      var value = msg.getAssetsMap();\n      reader.readMessage(value, function(message, reader) {\n        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, \"\");\n         });\n      break;\n    case 4:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setStartState(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.StateMachine.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.StateMachine.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.StateMachine} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.StateMachine.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getName();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getStatesList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      2,\n      f,\n      proto.State.serializeBinaryToWriter\n    );\n  }\n  f = message.getAssetsMap(true);\n  if (f && f.getLength() > 0) {\n    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);\n  }\n  f = message.getStartState();\n  if (f.length > 0) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string name = 1;\n * @return {string}\n */\nproto.StateMachine.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.StateMachine.prototype.setName = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * repeated State states = 2;\n * @return {!Array<!proto.State>}\n */\nproto.StateMachine.prototype.getStatesList = function() {\n  return /** @type{!Array<!proto.State>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.State, 2));\n};\n\n\n/** @param {!Array<!proto.State>} value */\nproto.StateMachine.prototype.setStatesList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n\n\n/**\n * @param {!proto.State=} opt_value\n * @param {number=} opt_index\n * @return {!proto.State}\n */\nproto.StateMachine.prototype.addStates = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.State, opt_index);\n};\n\n\nproto.StateMachine.prototype.clearStatesList = function() {\n  this.setStatesList([]);\n};\n\n\n/**\n * map<string, bytes> assets = 3;\n * @param {boolean=} opt_noLazyCreate Do not create the map if\n * empty, instead returning `undefined`\n * @return {!jspb.Map<string,!(string|Uint8Array)>}\n */\nproto.StateMachine.prototype.getAssetsMap = function(opt_noLazyCreate) {\n  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (\n      jspb.Message.getMapField(this, 3, opt_noLazyCreate,\n      null));\n};\n\n\nproto.StateMachine.prototype.clearAssetsMap = function() {\n  this.getAssetsMap().clear();\n};\n\n\n/**\n * optional string start_state = 4;\n * @return {string}\n */\nproto.StateMachine.prototype.getStartState = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/** @param {string} value */\nproto.StateMachine.prototype.setStartState = function(value) {\n  jspb.Message.setProto3StringField(this, 4, value);\n};\n\n\ngoog.object.extend(exports, proto);\n"],"sourceRoot":""}