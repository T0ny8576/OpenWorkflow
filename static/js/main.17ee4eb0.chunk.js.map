{"version":3,"sources":["utils.js","diagram.js","infoBox.js","toolbar.js","elementModal.js","App.js","serviceWorker.js","index.js","wca-state-machine_pb.js"],"names":["fsmPb","require","FSMElementType","STATE","Symbol","TRANSITION","Object","freeze","getFSMElementType","element","getProcessorsList","isObject","o","getPropertyByString","s","a","replace","split","i","n","length","k","findStatePbByName","stateName","fsm","result","getStatesList","map","state","getName","findTransitionOriginateState","transition","getTransitionsList","curTransition","elementToFormValues","values","elementType","name","isStartState","getStartState","to","getNextState","from","instruction","audio","getInstruction","getAudio","image","getImage","video","getVideo","Error","callable","elementCallables","elementCallableItem","item","type","getCallableName","callableArgs","JSON","parse","getCallableArgs","args","keys","key","push","callableToFormValues","getPredicatesList","getElementCallables","formCallableToElementCallable","callbleFormValue","setFunc","callablePbType","zoo","callableArray","_loop","idx","callableValue","callablePb","setName","setCallableName","setCallableArgs","stringify","allNamesAreValid","curCellNames","valid","includes","getAllNames","formValuesToElement","formValue","initElement","existingNames","undefined","State","addStates","Transition","addTransitions","newName","aux","oldName","setNextState","setStateName","setStartState","setProcessorsList","bind","Processor","procZoo","newFromStateName","oldFromState","index","indexOf","splice","setTransitionFromState","oldFromStateName","instPb","Instruction","setAudio","setImage","setVideo","setInstruction","setPredicatesList","TransitionPredicate","predZoo","adjustVertices","graph","cell","model","joint","dia","Element","_","chain","getConnectedLinks","groupBy","link","omit","source","id","target","each","group","first","value","sourceId","get","previous","targetId","siblings","getLinks","filter","sibling","siblingSourceId","siblingTargetId","numSiblings","unset","sourceCenter","getCell","getBBox","center","targetCenter","midPoint","g","Line","midpoint","theta","offset","Math","ceil","sign","GAP","reverse","angle","toRad","vertex","Point","fromPolar","vertices","shapes","basic","Circle","define","attrs","circle","stroke-width","text","font-weight","standard","Link","line","sourceMarker","width","stroke","smooth","Diagram","_Component","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","Graph","adjustGraphVertices","partial","on","state_shape_width","state_shape_height","state_spacing_x","state_spacing_y","state_per_row","cellId2FSMElement","name2Cell","Map","renderAllStates","assertThisInitialized","renderAllTransitions","getStateName2CellMap","clearGraph","removeUnusedCells","inherits","createClass","_this$props","onClickCell","paperWidth","$el","$","el","console","log","paper","Paper","height","gridSize","restrictTranslate","floor","parseInt","options","clear","stateCells","_this2","has","x","y","label","fsa","position","size","attr","addGraphCellWithRef","_this3","states","stateName2Cell","CustomArrow","labels","getElements","jointElement","error","ref","addCell","set","_this4","toDeleteNames","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","iterator","next","done","err","return","forEach","removeCells","delete","_this5","react_default","createElement","Component","getColumnWidth","rows","accessor","headerText","cellLength","max","apply","toConsumableArray","row","concat","min","InfoBox","imageInstUrl","res","URL","revokeObjectURL","blob","Blob","createObjectURL","prepareResource","tableData","callableItem","callable_name","callable_args","tableColumns","Header","filterMethod","matchSorter","filterAll","Cell","main_default","src","ListGroup_default","style","margin","ListGroupItem_default","variant","Fragment","alt","es","data","filterable","defaultFilterMethod","String","columns","defaultPageSize","makeTable","instance","ToolBar","_ref","onImport","onAdd","onExport","onEdit","onDelete","Row_default","ButtonGroup_default","Col_default","sm","lib_default","as","onChange","Button_default","className","onClick","Dropdown_default","Toggle","Menu","Item","isEmpty","errorMessage","test","isUniqueName","existingItemArray","isDuplicate","BSFormikField","field","placeholder","defaultValue","isValid","objectWithoutProperties","Form_default","Group","Row","Label","column","Control","assign","required","ImageUploadField","imageBytes","form","e","fileArray","fileContent","setFieldValue","Uint8Array","SelectFormikField","_ref2","selectOptions","react_select_esm","find","option","onBlur","CallableNameField","_ref3","elementModal_BSFormikField","CallableArgField","_ref4","addFieldError","errors","fieldName","createCallableMultiFields","callableTitle","arrayHelpers","zooOptions","getZooOptions","formik_esm","component","validate","createCallableArgMultiFields","remove","argIndex","ElementModal","React","createRef","onHide","title","_this$props2","show","onModalCancel","onModalSave","callableZoo","callableButtonValue","initValues","getInitModalValuesFromElement","Modal_default","Title","Body","initialValues","onSubmit","_ref5","setSubmitting","render","_ref6","_ref7","checked","fsmStateOptions","createTransitionBasicFields","eachCallable","Footer","current","submitForm","App","diagramRef","diagramContainerRef","alert","StateMachine","curFSMElement","modalInitElement","alertMsg","msg","showNewElementModal","newElementModalType","Container_default","fluid","Alert_default","dismissible","backgroundColor","diagram_Diagram","window","innerWidth","toolbar_ToolBar","infoBox","elementModal","setState","fsmData","deserializeBinary","loadFsm","fsmPbSerialized","serializeBinary","saveAs","isSafe","isElementSafeToDelete","elementIdx","hasCurElement","deleteStatePb","deleteTransitionPb","elementView","fsmElement","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","jspb","goog","global","Function","exportSymbol","proto","opt_data","Message","initialize","DEBUG","COMPILED","displayName","GENERATE_TO_OBJECT","prototype","toObject","opt_includeInstance","includeInstance","f","obj","getFieldWithDefault","callableName","callableKwargsMap","getCallableKwargsMap","$jspbMessageInstance","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","getFieldNumber","readString","readMessage","message","readBytes","skipField","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","writeString","getLength","writeBytes","setProto3StringField","opt_noLazyCreate","getMapField","clearCallableKwargsMap","getImage_asB64","getVideo_asB64","getImage_asU8","getVideo_asU8","bytesAsB64","bytesAsU8","setProto3BytesField","repeatedFields_","predicatesList","toObjectList","nextState","addPredicates","writeRepeatedMessage","writeMessage","getRepeatedWrapperField","setRepeatedWrapperField","opt_value","opt_index","addToRepeatedWrapperField","clearPredicatesList","getWrapperField","setWrapperField","clearInstruction","hasInstruction","getField","processorsList","transitionsList","addProcessors","clearProcessorsList","setTransitionsList","clearTransitionsList","statesList","assetsMap","getAssetsMap","startState","setStatesList","clearStatesList","clearAssetsMap","object","extend","exports"],"mappings":"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","file":"static/js/main.17ee4eb0.chunk.js","sourcesContent":["import procZoo from \"./processor-zoo.json\";\nimport predZoo from \"./predicate-zoo.json\";\nvar fsmPb = require(\"./wca-state-machine_pb\");\n\nexport const FSMElementType = {\n    STATE: Symbol(\"state\"),\n    TRANSITION: Symbol(\"transition\"),\n};\nObject.freeze(FSMElementType);\n\n// only support state and transition two types for now\nexport const getFSMElementType = (element) => {\n    return typeof element.getProcessorsList === \"function\"\n        ? FSMElementType.STATE\n        : FSMElementType.TRANSITION;\n};\n\nfunction isObject(o) {\n    //How you acomplish this is upto you.\n    return o === Object(o);\n}\n\n// allow array access using nested not annatation\n// obj = {\n//     'a': ['property': 'test']\n// }\n// e.g. obj['a.0.property']\nexport const getPropertyByString = function(o, s) {\n    if (s) {\n        s = s.replace(/^\\./, \"\"); // strip a leading dot\n        var a = s.split(\".\");\n        for (var i = 0, n = a.length; i < n; ++i) {\n            var k = a[i];\n            if (isObject(o) && k in o) {\n                o = o[k];\n            } else {\n                return;\n            }\n        }\n        return o;\n    } else {\n        return;\n    }\n};\n\nexport const findStatePbByName = function(stateName, fsm) {\n    let result = null;\n    fsm.getStatesList().map((state) => {\n        if (state.getName() === stateName) {\n            result = state;\n        }\n        return null;\n    });\n    return result;\n};\n\nexport const findTransitionOriginateState = function(transition, fsm) {\n    let result = null;\n    fsm.getStatesList().map((state) => {\n        state.getTransitionsList().map((curTransition) => {\n            if (curTransition === transition) {\n                result = state;\n            }\n            return null;\n        });\n        return null;\n    });\n    return result;\n};\n\nconst callableToFormValues = function(elementCallables) {\n    let result = [];\n    elementCallables.map((elementCallableItem) => {\n        let item = {};\n        item.name = elementCallableItem.getName();\n        item.type = elementCallableItem.getCallableName();\n        let callableArgs = JSON.parse(elementCallableItem.getCallableArgs());\n        item.args = {};\n        Object.keys(callableArgs).map((key) => {\n            item.args[key] = callableArgs[key];\n            return null;\n        });\n        result.push(item);\n        return null;\n    });\n    return result;\n};\n\nconst getElementCallables = function(element) {\n    const elementType = getFSMElementType(element);\n    let elementCallables = null;\n    switch (elementType) {\n        case FSMElementType.STATE:\n            elementCallables = element.getProcessorsList();\n            break;\n        case FSMElementType.TRANSITION:\n            elementCallables = element.getPredicatesList();\n            break;\n        default:\n            throw new Error(\n                \"Unsupported Element Type: \" +\n                    elementType +\n                    \". Failed to add a new element\"\n            );\n    }\n    return elementCallables;\n};\n\nexport const elementToFormValues = function(element, fsm) {\n    const values = {};\n    values.callable = [];\n    const elementType = getFSMElementType(element);\n    // name\n    const name = element.getName();\n    values.name = name;\n    // type specific attrs\n    switch (elementType) {\n        case FSMElementType.STATE:\n            values.isStartState = element.getName() === fsm.getStartState();\n            break;\n        case FSMElementType.TRANSITION:\n            values.to = element.getNextState();\n            values.from = findTransitionOriginateState(element, fsm).getName();\n            values.instruction = {};\n            values.instruction.audio = element.getInstruction().getAudio();\n            values.instruction.image = element.getInstruction().getImage();\n            values.instruction.video = element.getInstruction().getVideo();\n            break;\n        default:\n            throw new Error(\n                \"Unsupported Element Type: \" +\n                    elementType +\n                    \". Failed to add a new element\"\n            );\n            break;\n    }\n    // handle callables\n    values.callable = callableToFormValues(getElementCallables(element));\n    // add predicates\n    return values;\n};\n\nconst formCallableToElementCallable = function(\n    callbleFormValue,\n    setFunc,\n    callablePbType,\n    zoo\n) {\n    let callableArray = [];\n    for (let idx = 0; idx < callbleFormValue.length; idx++) {\n        let callableValue = callbleFormValue[idx];\n        let callablePb = new callablePbType();\n        callablePb.setName(callableValue.name);\n        callablePb.setCallableName(callableValue.type);\n        // callable args\n        // need to filter out relevant arguments only\n        // since the form may contain irrelevant arguments for other callable type\n        // this is caused by user switching callable types\n        let args = {};\n        Object.keys(zoo[callableValue.type]).map((key) => {\n            args[key] = callableValue.args[key];\n            return null;\n        });\n        callablePb.setCallableArgs(JSON.stringify(args));\n        callableArray.push(callablePb);\n    }\n    setFunc(callableArray);\n};\n\n/**\n * Change the name of a state\n * @param {*} element\n * @param {*} newName\n * @param {*} fsm\n */\nconst setStateName = function(element, newName, aux) {\n    const { fsm } = aux;\n    let oldName = element.getName();\n    if (oldName) {\n        // need to fix affected transitions nextState when a state name\n        // changes\n        fsm.getStatesList().map((state) => {\n            state.getTransitionsList().map((curTransition) => {\n                if (curTransition.getNextState() === oldName) {\n                    curTransition.setNextState(newName);\n                }\n                return null;\n            });\n            return null;\n        });\n    }\n    element.setName(newName);\n};\n\nconst setTransitionFromState = function(element, newFromStateName, aux) {\n    const { fsm } = aux;\n    let oldFromState = findTransitionOriginateState(element, fsm);\n    if (newFromStateName !== oldFromState.getName()) {\n        // remove the transition from the old state\n        let index = oldFromState.getTransitionsList().indexOf(element);\n        if (index > -1) {\n            oldFromState.getTransitionsList().splice(index, 1);\n        }\n        // add the transition to the new state\n        const fromStatePb = findStatePbByName(newFromStateName, fsm);\n        fromStatePb.addTransitions(element);\n    }\n};\n\nexport const allNamesAreValid = (fsm) => {\n    let curCellNames = [];\n    let valid = true;\n    fsm.getStatesList().map((state) => {\n        if (curCellNames.includes(state.getName())) valid = false;\n        curCellNames.push(state.getName());\n        state.getTransitionsList().map((transition) => {\n            if (curCellNames.includes(transition.getName())) valid = false;\n            curCellNames.push(transition.getName());\n            return null;\n        });\n        return null;\n    });\n    return valid;\n};\n\n/**\n * Get all state and transition names from a FSM\n */\nexport const getAllNames = (fsm) => {\n    let curCellNames = [];\n    fsm.getStatesList().map((state) => {\n        curCellNames.push(state.getName());\n        state.getTransitionsList().map((transition) => {\n            curCellNames.push(transition.getName());\n            return null;\n        });\n        return null;\n    });\n    return curCellNames;\n};\n\n/**\n * Set element from formValue.\n * @param {} formValue\n * @param {*} element: the FSM element to be set.\n */\nexport const formValuesToElement = function(formValue, fsm, type, initElement) {\n    // create or use appropriate element based on type\n    let element = null;\n    let existingNames = getAllNames(fsm);\n    if (initElement === null || initElement === undefined) {\n        debugger;\n        if (existingNames.includes(formValue.name))\n            throw \"Error: Duplicate name! All states and transitions must have unique names.\";\n        switch (type) {\n            case FSMElementType.STATE:\n                element = new fsmPb.State();\n                fsm.addStates(element);\n                break;\n            case FSMElementType.TRANSITION:\n                element = new fsmPb.Transition();\n                // find from state\n                const fromStatePb = findStatePbByName(formValue.from, fsm);\n                fromStatePb.addTransitions(element);\n                break;\n            default:\n                throw new Error(\n                    \"Unsupported Element Type: \" +\n                        type +\n                        \". Failed to add a new element\"\n                );\n        }\n    } else {\n        // if the element name changed and the new name is a duplicate\n        debugger;\n        if (\n            existingNames.includes(formValue.name) &&\n            initElement.getName() !== formValue.name\n        )\n            throw \"Error: Duplicate name! All states and transitions must have unique names.\";\n        element = initElement;\n    }\n\n    // deal with type specific fields\n    switch (type) {\n        case FSMElementType.STATE:\n            setStateName(element, formValue.name, { fsm: fsm });\n            // set start state\n            if (formValue.isStartState) {\n                fsm.setStartState(formValue.name);\n            }\n            // add processors\n            formCallableToElementCallable(\n                formValue.callable,\n                element.setProcessorsList.bind(element), //bind is needed to pass context\n                fsmPb.Processor,\n                procZoo\n            );\n            break;\n        case FSMElementType.TRANSITION:\n            element.setName(formValue.name);\n            // from state\n            setTransitionFromState(element, formValue.from, {\n                fsm: fsm,\n                oldFromStateName: formValue.from,\n            });\n            // to state\n            element.setNextState(formValue.to);\n            // instruction\n            let instPb = new fsmPb.Instruction();\n            if (formValue.instruction) {\n                instPb.setAudio(formValue.instruction.audio);\n                instPb.setImage(formValue.instruction.image);\n                instPb.setVideo(formValue.instruction.video);\n            }\n            element.setInstruction(instPb);\n            // add predicates\n            formCallableToElementCallable(\n                formValue.callable,\n                element.setPredicatesList.bind(element),\n                fsmPb.TransitionPredicate,\n                predZoo\n            );\n            break;\n        default:\n            throw new Error(\n                \"Unsupported Element Type: \" +\n                    type +\n                    \". Failed to add a new element\"\n            );\n    }\n};\n","import React, { Component } from \"react\";\nimport $ from \"jquery\";\nimport joint from \"jointjs\";\nimport _ from \"lodash\";\nimport { getAllNames } from \"./utils\";\n\n// define custom state machine JointJS elements\njoint.shapes.basic.Circle.define(\"fsa.State\", {\n    attrs: {\n        circle: {\n            \"stroke-width\": 2,\n        },\n        text: {\n            \"font-weight\": \"800\",\n        },\n    },\n});\n\njoint.shapes.standard.Link.define(\"fsa.CustomArrow\", {\n    attrs: {\n        line: {\n            sourceMarker: {\n                type: \"circle\",\n                width: 5,\n                stroke: \"none\",\n            },\n        },\n    },\n    smooth: true,\n});\n\nfunction adjustVertices(graph, cell) {\n    // if `cell` is a view, find its model\n    cell = cell.model || cell;\n\n    if (cell instanceof joint.dia.Element) {\n        // `cell` is an element\n\n        _.chain(graph.getConnectedLinks(cell))\n            .groupBy(function(link) {\n                // the key of the group is the model id of the link's source or target\n                // cell id is omitted\n                return _.omit([link.source().id, link.target().id], cell.id)[0];\n            })\n            .each(function(group, key) {\n                // if the member of the group has both source and target model\n                // then adjust vertices\n                if (key !== \"undefined\") adjustVertices(graph, _.first(group));\n            })\n            .value();\n\n        return;\n    }\n\n    // `cell` is a link\n    // get its source and target model IDs\n    var sourceId = cell.get(\"source\").id || cell.previous(\"source\").id;\n    var targetId = cell.get(\"target\").id || cell.previous(\"target\").id;\n\n    // if one of the ends is not a model\n    // (if the link is pinned to paper at a point)\n    // the link is interpreted as having no siblings\n    if (!sourceId || !targetId) {\n        // no vertices needed\n        cell.unset(\"vertices\");\n        return;\n    }\n\n    // identify link siblings\n    var siblings = graph.getLinks().filter(function(sibling) {\n        var siblingSourceId = sibling.source().id;\n        var siblingTargetId = sibling.target().id;\n\n        // if source and target are the same\n        // or if source and target are reversed\n        return (\n            (siblingSourceId === sourceId && siblingTargetId === targetId) ||\n            (siblingSourceId === targetId && siblingTargetId === sourceId)\n        );\n    });\n\n    var numSiblings = siblings.length;\n    switch (numSiblings) {\n        case 0: {\n            // the link has no siblings\n            break;\n        }\n        default: {\n            if (numSiblings === 1) {\n                // there is only one link\n                // no vertices needed\n                cell.unset(\"vertices\");\n            }\n\n            // there are multiple siblings\n            // we need to create vertices\n\n            // find the middle point of the link\n            var sourceCenter = graph\n                .getCell(sourceId)\n                .getBBox()\n                .center();\n            var targetCenter = graph\n                .getCell(targetId)\n                .getBBox()\n                .center();\n            var midPoint = joint.g.Line(sourceCenter, targetCenter).midpoint();\n\n            // find the angle of the link\n            var theta = sourceCenter.theta(targetCenter);\n\n            // constant\n            // the maximum distance between two sibling links\n            var GAP = 20;\n\n            _.each(siblings, function(sibling, index) {\n                // we want offset values to be calculated as 0, 20, 20, 40, 40, 60, 60 ...\n                var offset = GAP * Math.ceil(index / 2);\n\n                // place the vertices at points which are `offset` pixels perpendicularly away\n                // from the first link\n                //\n                // as index goes up, alternate left and right\n                //\n                //  ^  odd indices\n                //  |\n                //  |---->  index 0 sibling - centerline (between source and target centers)\n                //  |\n                //  v  even indices\n                var sign = index % 2 ? 1 : -1;\n\n                // to assure symmetry, if there is an even number of siblings\n                // shift all vertices leftward perpendicularly away from the centerline\n                if (numSiblings % 2 === 0) {\n                    offset -= (GAP / 2) * sign;\n                }\n\n                // make reverse links count the same as non-reverse\n                var reverse = theta < 180 ? 1 : -1;\n\n                // we found the vertex\n                var angle = joint.g.toRad(theta + sign * reverse * 90);\n                var vertex = joint.g.Point.fromPolar(offset, angle, midPoint);\n\n                // replace vertices array with `vertex`\n                sibling.vertices([vertex]);\n            });\n        }\n    }\n}\n\nconst create_transition_cell = (source, target, label) => {\n    var cell = new joint.shapes.fsa.CustomArrow({\n        source: {\n            id: source.id,\n        },\n        target: {\n            id: target.id,\n        },\n        labels: [\n            {\n                position: 0.5,\n                attrs: {\n                    text: {\n                        text: label || \"\",\n                    },\n                },\n            },\n        ],\n    });\n    return cell;\n};\n\nconst create_state_cell = (x, y, label) => {\n    let cell = new joint.shapes.fsa.State({\n        position: {\n            x: x,\n            y: y,\n        },\n        size: {\n            width: 100,\n            height: 100,\n        },\n        attrs: {\n            text: {\n                text: label,\n            },\n        },\n    });\n    return cell;\n};\n\nexport class Diagram extends Component {\n    constructor(props) {\n        super(props);\n        this.graph = new joint.dia.Graph();\n        // bind `graph` to the `adjustVertices` function\n        var adjustGraphVertices = _.partial(adjustVertices, this.graph);\n        // adjust vertices when a cell is removed or its source/target was changed\n        this.graph.on(\n            \"add remove change:source change:target\",\n            adjustGraphVertices\n        );\n\n        this.state_shape_width = 50;\n        this.state_shape_height = 50;\n        this.state_spacing_x = 250;\n        this.state_spacing_y = 150;\n        this.state_per_row = 3;\n        this.cellId2FSMElement = {};\n        this.name2Cell = new Map();\n        this.renderAllStates = this.renderAllStates.bind(this);\n        this.renderAllTransitions = this.renderAllTransitions.bind(this);\n        this.getStateName2CellMap = this.getStateName2CellMap.bind(this);\n        this.clearGraph = this.clearGraph.bind(this);\n        this.removeUnusedCells = this.removeUnusedCells.bind(this);\n    }\n\n    componentDidMount() {\n        const { onClickCell, paperWidth } = this.props;\n        this.$el = $(this.el);\n        console.log(\"paper width is: \" + paperWidth);\n        const paper = new joint.dia.Paper({\n            el: this.$el,\n            width: paperWidth,\n            height: 5 * paperWidth,\n            gridSize: 1,\n            model: this.graph,\n            restrictTranslate: true,\n        });\n        paper.on(\"cell:pointerdblclick\", onClickCell);\n        paper.on(\"cell:pointerclick\", onClickCell);\n        this.state_per_row =\n            Math.floor(\n                parseInt(paper.options.width, 10) /\n                    (this.state_shape_width + this.state_spacing_x)\n            ) + 1;\n    }\n\n    componentWillUnmount() {\n        this.graph.clear();\n        this.cellId2FSMElement = {};\n    }\n\n    componentDidUpdate() {}\n\n    handleStateCallback(cell) {\n        this.stateCells.push(cell);\n    }\n\n    renderAllStates(fsm) {\n        const stateCells = fsm.getStatesList().map((state, idx) => {\n            if (!this.name2Cell.has(state.getName())) {\n                const cell = create_state_cell(\n                    Math.floor(idx % this.state_per_row) * this.state_spacing_x,\n                    Math.floor(idx / this.state_per_row) * this.state_spacing_y,\n                    state.getName()\n                );\n                // mark start state\n                if (fsm.getStartState() === state.getName()) {\n                    cell.attr(\"circle/stroke-width\", \"5\");\n                }\n                this.addGraphCellWithRef(state.getName(), cell, state);\n            }\n            return null;\n        }, this);\n        return stateCells;\n    }\n\n    renderAllTransitions(fsm) {\n        const states = fsm.getStatesList();\n        const stateName2Cell = this.getStateName2CellMap();\n        const transitionCells = states.map((state) => {\n            return state.getTransitionsList().map((transition) => {\n                if (!this.name2Cell.has(transition.getName())) {\n                    const cell = create_transition_cell(\n                        stateName2Cell[state.getName()],\n                        stateName2Cell[transition.getNextState()],\n                        transition.getName()\n                    );\n                    this.addGraphCellWithRef(\n                        transition.getName(),\n                        cell,\n                        transition\n                    );\n                }\n                return null;\n            }, this);\n        }, this);\n        return transitionCells;\n    }\n\n    getStateName2CellMap() {\n        const stateCells = this.graph.getElements();\n        const stateName2Cell = {};\n        stateCells.map((jointElement) => {\n            const stateName = jointElement.attr(\"text/text\");\n            if (stateName in stateName2Cell) {\n                // throw new Error(\"Invalid FSM! Duplicate state name found.\");\n                console.error(\"Duplicate State Name: \" + stateName);\n            } else {\n                stateName2Cell[stateName] = jointElement;\n            }\n            return null;\n        });\n        return stateName2Cell;\n    }\n\n    addGraphCellWithRef(name, cell, ref) {\n        // addGraphCell add a cell to the graph and record the reference object\n        // this cell represents.\n        this.graph.addCell(cell);\n        this.cellId2FSMElement[cell.id] = ref;\n        this.name2Cell.set(name, cell);\n    }\n\n    clearGraph() {\n        this.graph.clear();\n        this.cellId2FSMElement = {};\n        this.name2Cell.clear();\n    }\n\n    removeUnusedCells(fsm) {\n        // first get all valid cell names\n        let curCellNames = getAllNames(fsm);\n        let toDeleteNames = [];\n        for (let key of this.name2Cell.keys()) {\n            if (!curCellNames.includes(key)) {\n                toDeleteNames.push(key);\n            }\n        }\n        toDeleteNames.forEach((name) => {\n            this.graph.removeCells(this.name2Cell.get(name));\n            this.name2Cell.delete(name);\n            return null;\n        });\n    }\n\n    render() {\n        const { fsm } = this.props;\n        if (fsm != null) {\n            // remove old cells, this can be caused either by deletion or renaming\n            this.removeUnusedCells(fsm);\n            this.renderAllStates(fsm);\n            this.renderAllTransitions(fsm);\n        }\n        return <div ref={(el) => (this.el = el)} />;\n    }\n}\n","import React, { Component } from \"react\";\nimport ReactTable from \"react-table\";\nimport matchSorter from \"match-sorter\";\nimport ListGroup from \"react-bootstrap/lib/ListGroup\";\nimport ListGroupItem from \"react-bootstrap/lib/ListGroupItem\";\nimport { FSMElementType, getFSMElementType } from \"./utils.js\";\nimport \"react-table/react-table.css\";\nimport ReactJson from \"react-json-view\";\n\nconst getColumnWidth = (rows, accessor, headerText) => {\n  const maxWidth = 400;\n  const magicSpacing = 11;\n  const cellLength = Math.max(\n    ...rows.map(row => (`${row[accessor]}` || \"\").length),\n    headerText.length\n  );\n  return Math.min(maxWidth, cellLength * magicSpacing);\n};\n\nclass InfoBox extends Component {\n  constructor(props) {\n    super(props);\n    this.imageInstUrl = null;\n  }\n\n  prepareResource(element) {\n    let res = {};\n    // clear up urls to prevent leaking memories\n    if (this.imageInstUrl !== null) {\n      URL.revokeObjectURL(this.imageInstUrl);\n    }\n    if (element.getInstruction()) {\n      if (element.getInstruction().getImage()) {\n        let blob = new Blob([element.getInstruction().getImage()], {\n          type: \"image\"\n        });\n        this.imageInstUrl = URL.createObjectURL(blob);\n        res.imageInstUrl = this.imageInstUrl;\n      }\n    }\n    return res;\n  }\n\n  render() {\n    const { element } = this.props;\n    const elementType = getFSMElementType(element);\n\n    // prepare resources\n    let res = {};\n    if (elementType === FSMElementType.TRANSITION) {\n      res = this.prepareResource(element);\n    }\n\n    const tableData =\n      elementType === FSMElementType.STATE\n        ? element.getProcessorsList().map(callableItem => {\n            return {\n              name: callableItem.getName(),\n              callable_name: callableItem.getCallableName(),\n              callable_args: JSON.parse(callableItem.getCallableArgs())\n            };\n          })\n        : element.getPredicatesList().map(callableItem => {\n            return {\n              name: callableItem.getName(),\n              callable_name: callableItem.getCallableName(),\n              callable_args: JSON.parse(callableItem.getCallableArgs())\n            };\n          });\n    const tableColumns = [\n      {\n        Header: \"Name\",\n        accessor: \"name\",\n        filterMethod: (filter, rows) =>\n          matchSorter(rows, filter.value, { keys: [\"name\"] }),\n        filterAll: true,\n        width: getColumnWidth(tableData, \"name\", \"Name\")\n      },\n      {\n        Header: \"Type\",\n        accessor: \"callable_name\",\n        filterMethod: (filter, rows) =>\n          matchSorter(rows, filter.value, {\n            keys: [\"callable_name\"]\n          }),\n        filterAll: true,\n        width: getColumnWidth(tableData, \"callable_name\", \"Type\")\n      },\n      {\n        Header: \"Arguments\",\n        accessor: \"callable_args\",\n        filterMethod: (filter, rows) =>\n          matchSorter(rows, filter.value, {\n            keys: [\"callable_args\"]\n          }),\n        Cell: row => <ReactJson src={row.value} />,\n        filterAll: true\n      }\n    ];\n    return (\n      <ListGroup style={{ width: \"100%\", margin: \"20px\" }}>\n        <ListGroupItem variant=\"secondary\">\n          Name: {element.getName()}\n        </ListGroupItem>\n        <ListGroupItem variant=\"secondary\">\n          Type: {elementType === FSMElementType.STATE ? \"State\" : \"Transition\"}\n        </ListGroupItem>\n        {elementType === FSMElementType.TRANSITION && (\n          <>\n            <ListGroupItem variant=\"secondary\">Instruction</ListGroupItem>\n            <ListGroupItem>\n              Audio: {element.getInstruction().getAudio()}\n            </ListGroupItem>\n            {res.imageInstUrl ? (\n              <ListGroupItem>\n                Image: <img src={res.imageInstUrl} alt=\"instruction\" />\n              </ListGroupItem>\n            ) : (\n              <ListGroupItem>Image: </ListGroupItem>\n            )}\n            <ListGroupItem>\n              Video: {element.getInstruction().getVideo()}\n            </ListGroupItem>\n          </>\n        )}\n        <ListGroupItem variant=\"secondary\">\n          {elementType === FSMElementType.STATE\n            ? \"Processors\"\n            : \"Transition Predicates\"}\n        </ListGroupItem>\n        <ReactTable\n          data={tableData}\n          filterable\n          defaultFilterMethod={(filter, row) =>\n            String(row[filter.id]) === filter.value\n          }\n          columns={tableColumns}\n          defaultPageSize={3}\n        >\n          {(state, makeTable, instance) => {\n            return <div>{makeTable()}</div>;\n          }}\n        </ReactTable>\n      </ListGroup>\n    );\n  }\n}\n\nexport default InfoBox;\n","import React from \"react\";\nimport Button from \"react-bootstrap/lib/Button\";\nimport ButtonGroup from \"react-bootstrap/lib/ButtonGroup\";\nimport Dropdown from \"react-bootstrap/lib/Dropdown\";\nimport Row from \"react-bootstrap/lib/Row\";\nimport Col from \"react-bootstrap/lib/Col\";\nimport FileReaderInput from \"react-file-reader-input\";\nimport { FSMElementType } from \"./utils.js\";\nimport \"./App.css\";\n\nexport const ToolBar = ({\n  onImport,\n  onAdd,\n  onExport,\n  onEdit,\n  onDelete\n}) => {\n  return (\n    <>\n      <Row>\n        <ButtonGroup>\n          <Col sm={3}>\n            <FileReaderInput as=\"buffer\" onChange={onImport}>\n              <Button variant=\"primary\" className=\"fw-btn\">Import</Button>\n            </FileReaderInput>\n          </Col>\n          <Col sm={3}>\n            <Button variant=\"primary\" onClick={onExport} className=\"fw-btn\">\n              Export\n          </Button>\n          </Col>\n          <Col sm={3}>\n            <Dropdown>\n              <Dropdown.Toggle id=\"dropdown-add\" className=\"fw-btn\">Add</Dropdown.Toggle>\n              <Dropdown.Menu>\n                <Dropdown.Item onClick={() => onAdd(FSMElementType.STATE)}>State</Dropdown.Item>\n                <Dropdown.Item onClick={() => onAdd(FSMElementType.TRANSITION)}>Transition</Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </Col>\n          <Col sm={3}>\n            <Button variant=\"primary\" onClick={onEdit} className=\"fw-btn\">\n              Edit\n          </Button>\n          </Col>\n          <Col sm={3}>\n            <Button variant=\"primary\" onClick={onDelete} className=\"fw-btn\">\n              Delete\n          </Button>\n          </Col>\n        </ButtonGroup>\n      </Row>\n    </>\n  );\n};\n","import React, { Component } from \"react\";\nimport Modal from \"react-bootstrap/lib/Modal\";\nimport Button from \"react-bootstrap/lib/Button\";\nimport Form from \"react-bootstrap/lib/Form\";\nimport Col from \"react-bootstrap/lib/Col\";\nimport Row from \"react-bootstrap/lib/Row\";\nimport { Formik, Form as FormikForm, Field, FieldArray } from \"formik\";\nimport FileReaderInput from \"react-file-reader-input\";\nimport \"./App.css\";\nimport Select from \"react-select\";\nimport procZoo from \"./processor-zoo.json\";\nimport predZoo from \"./predicate-zoo.json\";\nimport {\n    FSMElementType,\n    getPropertyByString,\n    elementToFormValues,\n    getAllNames,\n} from \"./utils.js\";\n\n/** Helper function to create options for Select elements\n * from a pre-defined callable zoo (procZoo or predZoo)\n *\n * @param {*} zoo\n */\nconst getZooOptions = (zoo) => {\n    return Object.keys(zoo).map((key) => {\n        return { value: key, label: key };\n    });\n};\n\n/** Custom validate functions for Formik forms\n *\n * Formik has a wierd return requirement\n * if invalid, return a string containing the error message or return undefined.\n *\n * return null if valid, a string if invalid\n * @param {*} param0\n */\nconst isEmpty = (value) => {\n    let errorMessage = null;\n    if (value === undefined || value === null || !/^.+$/i.test(value)) {\n        errorMessage = \"Required. Cannot be empty.\";\n    }\n    return errorMessage;\n};\n\n/**\n * return null if valid, a string if invalid\n * @param {*} value\n * @param {*} existingItemArray\n */\nconst isDuplicate = (value, existingItemArray) => {\n    let errorMessage = null;\n    if (\n        value === undefined ||\n        value === null ||\n        existingItemArray.includes(value)\n    ) {\n        errorMessage =\n            \"Duplicate name. All states and transitions must have unique names.\";\n    }\n    return errorMessage;\n};\n\n/**\n * return null if valid, a string if invalid\n */\nconst isUniqueName = (value, existingItemArray) => {\n    return isEmpty(value) || isDuplicate(value, existingItemArray) || null;\n};\n\n/*\nCustomize the look of form fields using bootstrap.\nThese following React components should be passed as the \"component\"\nproperty of a Formik field.\n*/\nconst BSFormikField = ({\n    field, // { name, value, onChange, onBlur }\n    type,\n    label,\n    placeholder,\n    defaultValue,\n    isValid,\n    ...props\n}) => (\n    <Form.Group as={Row}>\n        <Form.Label column>{label}</Form.Label>\n        <Col>\n            <Form.Control\n                required\n                {...field}\n                {...props}\n                type={type}\n                placeholder={placeholder}\n                value={field.value || defaultValue || \"\"} // to supress uncontrolled to controlled warning\n                isValid={isValid}\n            />\n        </Col>\n    </Form.Group>\n);\n\nclass ImageUploadField extends Component {\n    constructor(props) {\n        super(props);\n        this.imageInstUrl = null;\n    }\n\n    prepareResource(imageBytes) {\n        // clear up urls to prevent leaking memories\n        if (this.imageInstUrl !== null) {\n            URL.revokeObjectURL(this.imageInstUrl);\n        }\n        let blob = new Blob([imageBytes], {\n            type: \"image\",\n        });\n        this.imageInstUrl = URL.createObjectURL(blob);\n        return {\n            imageInstUrl: this.imageInstUrl,\n        };\n    }\n\n    render() {\n        const { field, form, label } = this.props;\n        let res = {};\n        if (field.value) {\n            res = this.prepareResource(field.value);\n        }\n        return (\n            <Form.Group as={Row}>\n                <Form.Label column>{label}</Form.Label>\n                {res.imageInstUrl && (\n                    <Form.Label column sm={1}>\n                        <img\n                            src={res.imageInstUrl}\n                            alt=\"instruction\"\n                            style={{ width: 40, height: 40 }}\n                        />\n                    </Form.Label>\n                )}\n                <Col>\n                    <FileReaderInput\n                        as=\"buffer\"\n                        onChange={(e, fileArray) => {\n                            fileArray.forEach((result) => {\n                                const e = result[0];\n                                let fileContent = e.target.result;\n                                form.setFieldValue(\n                                    field.name,\n                                    new Uint8Array(fileContent)\n                                );\n                            });\n                        }}\n                    >\n                        <Button variant=\"light\" className=\"fw-btn\">\n                            New Image\n                        </Button>\n                    </FileReaderInput>\n                </Col>\n            </Form.Group>\n        );\n    }\n}\n\n/** Custom the look of a Formik Select field with react-select\n *\n * @param {*} param0\n */\nconst SelectFormikField = ({\n    field,\n    form, // values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n    label,\n    selectOptions,\n    ...props\n}) => (\n    <Form.Group as={Row}>\n        <Form.Label column>{label}</Form.Label>\n        <Col>\n            <Select\n                {...field}\n                {...props}\n                options={selectOptions}\n                name={field.name}\n                value={\n                    selectOptions\n                        ? selectOptions.find(\n                              (option) => option.value === field.value\n                          )\n                        : \"\"\n                }\n                onChange={(option) =>\n                    form.setFieldValue(field.name, option.value)\n                }\n                onBlur={field.onBlur}\n            />\n        </Col>\n    </Form.Group>\n);\n\nconst CallableNameField = ({\n    field, // name, value, onChange, onBlur\n    ...props\n}) => (\n    <BSFormikField\n        field={field}\n        type=\"text\"\n        label=\"name\"\n        placeholder=\"Enter Name\"\n        {...props}\n    />\n);\n\nconst CallableArgField = ({\n    field,\n    key, // unused. not passed to the field. just to suppress parent's react list warning\n    label,\n    placeholder,\n    ...props\n}) => (\n    <BSFormikField\n        field={field}\n        type=\"text\"\n        label={label}\n        placeholder={placeholder}\n        {...props}\n    />\n);\n\nconst addFieldError = (errors, fieldName) => {\n    if (getPropertyByString(errors, fieldName)) {\n        return (\n            <div className=\"text-danger\">\n                {getPropertyByString(errors, fieldName)}\n            </div>\n        );\n    } else {\n        return null;\n    }\n};\n\n/*\nFunctions to create a group of form field to present a \"callable\".\nThe UIs to create a \"callable\" consist of following form fields:\n1. callable name\n2. callable type\n3. A field for each callable argument (loaded from callable zoos)\n*/\nconst createCallableMultiFields = (\n    callableTitle,\n    zoo,\n    values,\n    index,\n    arrayHelpers,\n    errors\n) => {\n    const zooOptions = getZooOptions(zoo);\n    return (\n        <div key={index} className=\"border\">\n            <h6>{callableTitle}</h6>\n            <Field\n                name={`callable.${index}.name`} // add values.callable[index].name\n                component={CallableNameField}\n                validate={isEmpty}\n            />\n            {addFieldError(errors, `callable.${index}.name`)}\n            <Field\n                name={`callable.${index}.type`} // add values.callable[index].name\n                component={SelectFormikField}\n                label=\"Type\"\n                selectOptions={zooOptions}\n                validate={isEmpty}\n            />\n            {addFieldError(errors, `callable.${index}.type`)}\n            {getPropertyByString(values, `callable.${index}.type`) &&\n                createCallableArgMultiFields(\n                    zoo[values[\"callable\"][index][\"type\"]],\n                    index,\n                    errors\n                )}\n            <Form.Row>\n                <Button\n                    variant=\"danger\"\n                    className=\"btn-block\"\n                    onClick={() => arrayHelpers.remove({ index })}\n                >\n                    Delete\n                </Button>\n            </Form.Row>\n        </div>\n    );\n};\n\n/*\nCreate a field for each callable argument.\n*/\nconst createCallableArgMultiFields = (args, index, errors) => {\n    const argFields = Object.keys(args).map((key, argIndex) => {\n        return (\n            <div key={index + \".arg.\" + argIndex}>\n                <Field\n                    name={`callable.${index}.args.${key}`} // add values.callable[0].name\n                    component={CallableArgField}\n                    label={key}\n                    placeholder={args[key]}\n                    defaultValue=\"\"\n                    validate={isEmpty}\n                />\n                {addFieldError(errors, `callable.${index}.args.${key}`)}\n            </div>\n        );\n    });\n    return argFields;\n};\n\n/** Create transition basic fields including\n * from and to state, and instructions.\n *\n * @param {*} values\n */\nconst createTransitionBasicFields = (fsm, form, errors) => {\n    const fsmStateOptions = fsm.getStatesList().map((state) => {\n        return { value: state.getName(), label: state.getName() };\n    });\n    return (\n        <>\n            <Field\n                name=\"from\"\n                component={SelectFormikField}\n                label=\"From State\"\n                selectOptions={fsmStateOptions}\n                validate={isEmpty}\n            />\n            {addFieldError(errors, \"from\")}\n            <Field\n                name=\"to\"\n                component={SelectFormikField}\n                label=\"To State\"\n                selectOptions={fsmStateOptions}\n                validate={isEmpty}\n            />\n            {addFieldError(errors, \"to\")}\n            <Field\n                name=\"instruction.audio\"\n                component={BSFormikField}\n                type=\"text\"\n                label=\"Audio Instruction\"\n                defaultValue=\"\"\n            />\n            <Field\n                name=\"instruction.image\"\n                component={ImageUploadField}\n                label=\"Image Instruction\"\n            />\n            <Field\n                name=\"instruction.video\"\n                component={BSFormikField}\n                type=\"text\"\n                label=\"Video Instruction\"\n                defaultValue=\"\"\n            />\n        </>\n    );\n};\n\n/**\n * A Modal used to create a new FSM element.\n * The core of the modal is a Formik form that captures\n * the user-inputted properties for the element\n */\nclass ElementModal extends Component {\n    constructor(props) {\n        super(props);\n        this.form = React.createRef();\n        this.onHide = this.onHide.bind(this);\n    }\n\n    onHide() {\n        // do nothing\n    }\n\n    getInitModalValuesFromElement(element, fsm) {\n        if (element === null) {\n            return {\n                callable: [],\n            };\n        } else {\n            return elementToFormValues(element, fsm);\n        }\n    }\n\n    render() {\n        const {\n            show,\n            type,\n            fsm,\n            onModalCancel,\n            onModalSave,\n            initElement,\n        } = this.props;\n\n        let title,\n            callableTitle = \"\";\n        let callableZoo = null;\n        let callableButtonValue = \"\";\n        switch (type) {\n            case FSMElementType.STATE:\n                title = \"State\";\n                callableTitle = \"New Processor\";\n                callableButtonValue = \"Add Processor\";\n                callableZoo = procZoo;\n                break;\n            case FSMElementType.TRANSITION:\n                title = \"Transition\";\n                callableTitle = \"New Predicate\";\n                callableButtonValue = \"Add Predicate\";\n                callableZoo = predZoo;\n                break;\n            default:\n                throw new Error(\n                    \"Unsupported Element Type: \" +\n                        type +\n                        \". Failed to add a new element\"\n                );\n        }\n\n        const initValues = this.getInitModalValuesFromElement(initElement, fsm);\n\n        return (\n            <Modal show={show} onHide={this.onHide}>\n                <Modal.Header>\n                    <Modal.Title>{title}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Formik\n                        ref={this.form}\n                        initialValues={initValues}\n                        onSubmit={(values, { props, setSubmitting }) => {\n                            onModalSave(type, values, initElement);\n                            setSubmitting(false);\n                        }}\n                        render={({ form, values, errors }) => (\n                            <FormikForm>\n                                <FieldArray\n                                    name=\"callable\"\n                                    render={(arrayHelpers) => {\n                                        return (\n                                            <>\n                                                {type ===\n                                                    FSMElementType.STATE && (\n                                                    <>\n                                                        <Field\n                                                            name=\"name\"\n                                                            component={\n                                                                BSFormikField\n                                                            }\n                                                            type=\"text\"\n                                                            label=\"Name\"\n                                                            validate={(\n                                                                value\n                                                            ) => {\n                                                                if (\n                                                                    initElement ===\n                                                                        null ||\n                                                                    initElement ===\n                                                                        undefined\n                                                                ) {\n                                                                    const existingItemArray = getAllNames(\n                                                                        fsm\n                                                                    );\n                                                                    return isUniqueName(\n                                                                        value,\n                                                                        existingItemArray\n                                                                    );\n                                                                } else {\n                                                                    return isEmpty(\n                                                                        value\n                                                                    );\n                                                                }\n                                                            }}\n                                                        />\n                                                        {addFieldError(\n                                                            errors,\n                                                            \"name\"\n                                                        )}\n                                                        <Field name=\"isStartState\">\n                                                            {({\n                                                                field,\n                                                                form,\n                                                            }) => {\n                                                                return (\n                                                                    <Form.Group\n                                                                        as={Row}\n                                                                    >\n                                                                        <Form.Label\n                                                                            column\n                                                                        >\n                                                                            Start\n                                                                            from\n                                                                            this\n                                                                            state?\n                                                                        </Form.Label>\n                                                                        <Col>\n                                                                            <Form.Control\n                                                                                type=\"checkbox\"\n                                                                                checked={\n                                                                                    values[\n                                                                                        field\n                                                                                            .name\n                                                                                    ]\n                                                                                }\n                                                                                onChange={() => {\n                                                                                    if (\n                                                                                        values[\n                                                                                            field\n                                                                                                .name\n                                                                                        ]\n                                                                                    ) {\n                                                                                        form.setFieldValue(\n                                                                                            field.name,\n                                                                                            false\n                                                                                        );\n                                                                                    } else {\n                                                                                        form.setFieldValue(\n                                                                                            field.name,\n                                                                                            true\n                                                                                        );\n                                                                                    }\n                                                                                }}\n                                                                            />\n                                                                        </Col>\n                                                                    </Form.Group>\n                                                                );\n                                                            }}\n                                                        </Field>\n                                                    </>\n                                                )}\n                                                {type ===\n                                                    FSMElementType.TRANSITION && (\n                                                    <>\n                                                        <Field\n                                                            name=\"name\"\n                                                            component={\n                                                                BSFormikField\n                                                            }\n                                                            type=\"text\"\n                                                            label=\"Name\"\n                                                            validate={(\n                                                                value\n                                                            ) => {\n                                                                if (\n                                                                    initElement ===\n                                                                        null ||\n                                                                    initElement ===\n                                                                        undefined\n                                                                ) {\n                                                                    const existingItemArray = getAllNames(\n                                                                        fsm\n                                                                    );\n                                                                    return isUniqueName(\n                                                                        value,\n                                                                        existingItemArray\n                                                                    );\n                                                                } else {\n                                                                    return isEmpty(\n                                                                        value\n                                                                    );\n                                                                }\n                                                            }}\n                                                        />\n                                                        {addFieldError(\n                                                            errors,\n                                                            \"name\"\n                                                        )}\n                                                        {createTransitionBasicFields(\n                                                            fsm,\n                                                            form,\n                                                            errors\n                                                        )}\n                                                    </>\n                                                )}\n                                                {values.callable.map(\n                                                    (eachCallable, index) =>\n                                                        createCallableMultiFields(\n                                                            callableTitle,\n                                                            callableZoo,\n                                                            values,\n                                                            index,\n                                                            arrayHelpers,\n                                                            errors\n                                                        )\n                                                )}\n                                                <Form.Row>\n                                                    <Button\n                                                        variant=\"info\"\n                                                        className=\"btn-block\"\n                                                        onClick={() =>\n                                                            arrayHelpers.push(\n                                                                {}\n                                                            )\n                                                        }\n                                                    >\n                                                        {callableButtonValue}\n                                                    </Button>\n                                                </Form.Row>\n                                            </>\n                                        );\n                                    }}\n                                />\n                            </FormikForm>\n                        )}\n                    />\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={onModalCancel}>\n                        Close\n                    </Button>\n                    <Button\n                        variant=\"primary\"\n                        onClick={(e) => {\n                            this.form.current.submitForm();\n                        }}\n                    >\n                        Save Changes\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n\nexport default ElementModal;\n","import React, { Component } from \"react\";\nimport Container from \"react-bootstrap/lib/Container\";\nimport Row from \"react-bootstrap/lib/Row\";\nimport Col from \"react-bootstrap/lib/Col\";\nimport Alert from \"react-bootstrap/lib/Alert\";\nimport { Diagram } from \"./diagram.js\";\nimport \"./App.css\";\nimport InfoBox from \"./infoBox.js\";\nimport { ToolBar } from \"./toolbar.js\";\nimport {\n    FSMElementType,\n    getFSMElementType,\n    formValuesToElement,\n    allNamesAreValid,\n} from \"./utils.js\";\nimport ElementModal from \"./elementModal.js\";\nimport saveAs from \"file-saver\";\nvar fsmPb = require(\"./wca-state-machine_pb\");\n\nfunction loadFsm(fsmData) {\n    let fsm = null;\n    try {\n        fsm = fsmPb.StateMachine.deserializeBinary(fsmData);\n    } catch (err) {\n        throw \"Incorrect file format. \" + err;\n    }\n    if (fsm && !allNamesAreValid(fsm)) {\n        throw \"FSM contains duplicate names! For this web editor to work properly, \" +\n            \"all states and transitions need to have unique names.\" +\n            \"If you create the FSM using the python library, make sure to assign unique names for states and transitions.\";\n    }\n    return fsm;\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.diagramRef = React.createRef();\n        this.diagramContainerRef = React.createRef();\n        this.alert = this.alert.bind(this);\n        this.onImport = this.onImport.bind(this);\n        this.onExport = this.onExport.bind(this);\n        this.onAdd = this.onAdd.bind(this);\n        this.onDelete = this.onDelete.bind(this);\n        this.onEdit = this.onEdit.bind(this);\n        this.onClickCell = this.onClickCell.bind(this);\n        this.onModalCancel = this.onModalCancel.bind(this);\n        this.onModalSave = this.onModalSave.bind(this);\n        this.state = {\n            fsm: new fsmPb.StateMachine(),\n            curFSMElement: null,\n            modalInitElement: null,\n            alertMsg: {\n                show: true,\n                type: \"info\",\n                msg: \"Welcome to State Machine Editor!\",\n            },\n            showNewElementModal: false,\n            newElementModalType: null,\n        };\n    }\n\n    render() {\n        return (\n            <Container fluid>\n                <h1>OpenWorkflow State Machine Editor</h1>\n                {this.state.alertMsg.msg !== \"\" && (\n                    <Alert dismissible variant={this.state.alertMsg.type}>\n                        {this.state.alertMsg.msg}\n                    </Alert>\n                )}\n                <Row>\n                    <Col\n                        sm={6}\n                        ref={this.diagramContainerRef}\n                        style={{ backgroundColor: \"lavender\" }}\n                    >\n                        <h4>Diagram</h4>\n                        <Diagram\n                            fsm={this.state.fsm}\n                            onClickCell={this.onClickCell}\n                            ref={this.diagramRef}\n                            paperWidth={window.innerWidth / 2} // half of current window's inner width\n                        />\n                    </Col>\n                    <Col sm={6}>\n                        <ToolBar\n                            onImport={this.onImport}\n                            onAdd={this.onAdd}\n                            onExport={this.onExport}\n                            onDelete={this.onDelete}\n                            onEdit={this.onEdit}\n                        />\n                        {this.state.curFSMElement && (\n                            <Row>\n                                <InfoBox\n                                    element={this.state.curFSMElement}\n                                    style={{ width: \"100%\" }}\n                                />\n                            </Row>\n                        )}\n                    </Col>\n                </Row>\n                <footer>\n                    <Container>\n                        <span className=\"text-muted\">\n                            Copyright Carnegie Mellon University\n                        </span>\n                    </Container>\n                </footer>\n                {this.state.showNewElementModal && (\n                    <ElementModal\n                        fsm={this.state.fsm} // new elements may depend on existing elements (e.g. adding a transition between two states)\n                        show={this.state.showNewElementModal}\n                        type={this.state.newElementModalType}\n                        initElement={this.state.modalInitElement} // if element is not null, then edit the element\n                        onModalSave={this.onModalSave}\n                        onModalCancel={this.onModalCancel}\n                    />\n                )}\n            </Container>\n        );\n    }\n\n    alert(type, msg) {\n        this.setState({\n            alertMsg: {\n                type: type,\n                msg: msg,\n            },\n        });\n    }\n\n    // toolbar callbacks\n    onImport(e, fileArray) {\n        fileArray.forEach((result) => {\n            const e = result[0];\n            let fileContent = e.target.result;\n            let fsm = null;\n            try {\n                fsm = loadFsm(fileContent);\n                this.setState({ fsm: fsm, curFSMElement: null });\n                this.alert(\"info\", \"Success! State machine imported.\");\n            } catch (err) {\n                this.alert(\"danger\", \"Failed to import the file. \\n\" + err);\n            }\n        });\n    }\n\n    onExport() {\n        const fsmPb = this.state.fsm;\n        if (fsmPb.getStatesList().length === 0) {\n            this.alert(\n                \"danger\",\n                \"Empty state machine! There is nothing to save. \\n\"\n            );\n        } else {\n            // TODO(junjuew): fix start state. It should be marked by users\n            // instead of being the first state added\n            if (fsmPb.getStartState() === \"\") {\n                fsmPb.setStartState(fsmPb.getStatesList()[0].getName());\n            }\n            let fsmPbSerialized = fsmPb.serializeBinary();\n            let blob = new Blob([fsmPbSerialized], {\n                type: \"application/octet-stream\",\n            });\n            saveAs(blob, \"app.pbfsm\");\n        }\n    }\n\n    onAdd(type) {\n        this.setState({ showNewElementModal: true, newElementModalType: type });\n    }\n\n    isElementSafeToDelete(element) {\n        const fsm = this.state.fsm;\n        const elementType = getFSMElementType(element);\n        let isSafe = true;\n        switch (elementType) {\n            case FSMElementType.STATE:\n                // check if there are transitions starting from this state\n                if (element.getTransitionsList().length > 0) isSafe = false;\n                // check if there are transitions ending at this state\n                fsm.getStatesList().map((state) => {\n                    state.getTransitionsList().map((transition) => {\n                        if (transition.getNextState() === element.getName()) {\n                            isSafe = false;\n                        }\n                        return null;\n                    });\n                    return null;\n                });\n                return isSafe;\n            case FSMElementType.TRANSITION:\n                return isSafe;\n            default:\n                throw new Error(\"Unsupported Element Type: \" + elementType);\n        }\n    }\n\n    deleteStatePb(element) {\n        const fsm = this.state.fsm;\n        if (this.isElementSafeToDelete(element)) {\n            const elementIdx = fsm.getStatesList().indexOf(element);\n            fsm.getStatesList().splice(elementIdx, 1);\n            this.setState({ fsm: fsm, curFSMElement: null });\n        } else {\n            return this.alert(\n                \"danger\",\n                \"A state cannot be deleted unless all transitions to/from it have been deleted.\"\n            );\n        }\n    }\n\n    deleteTransitionPb(element) {\n        const fsm = this.state.fsm;\n        if (this.isElementSafeToDelete(element)) {\n            // find the state this transition belons to and removes it from\n            // the transitions list\n            fsm.getStatesList().map((state) => {\n                const elementIdx = state.getTransitionsList().indexOf(element);\n                if (elementIdx >= 0) {\n                    state\n                        .getTransitionsList()\n                        .splice(elementIdx, elementIdx + 1);\n                }\n                return null;\n            });\n            this.setState({ fsm: fsm, curFSMElement: null });\n        } else {\n            return this.alert(\n                \"danger\",\n                \"The transition cannot be safely deleted\"\n            );\n        }\n    }\n\n    hasCurElement() {\n        const element = this.state.curFSMElement;\n        if (element === null) {\n            this.alert(\n                \"danger\",\n                \"There is no element selected. Double-click to select an element.\"\n            );\n            return false;\n        }\n        return true;\n    }\n\n    onEdit() {\n        if (this.hasCurElement()) {\n            const element = this.state.curFSMElement;\n            const elementType = getFSMElementType(element);\n            this.setState({\n                showNewElementModal: true,\n                newElementModalType: elementType,\n                modalInitElement: element,\n            });\n        }\n    }\n\n    onDelete() {\n        if (this.hasCurElement()) {\n            const element = this.state.curFSMElement;\n            const elementType = getFSMElementType(element);\n            switch (elementType) {\n                case FSMElementType.STATE:\n                    this.deleteStatePb(element);\n                    break;\n                case FSMElementType.TRANSITION:\n                    this.deleteTransitionPb(element);\n                    break;\n                default:\n                    throw new Error(\"Unsupported Element Type: \" + elementType);\n            }\n        }\n    }\n\n    // diagram callbacks\n    onClickCell(elementView) {\n        const fsmElement = this.diagramRef.current.cellId2FSMElement[\n            elementView.model.id\n        ];\n        this.setState({\n            curFSMElement: fsmElement,\n        });\n    }\n\n    onModalSave(type, formValue, initElement) {\n        const fsm = this.state.fsm;\n        try {\n            formValuesToElement(formValue, fsm, type, initElement);\n            this.setState({ fsm: fsm });\n            this.setState({\n                showNewElementModal: false,\n                modalInitElement: null,\n            });\n        } catch (err) {\n            this.setState({\n                showNewElementModal: false,\n                modalInitElement: null,\n            });\n            this.alert(\"danger\", err);\n        }\n    }\n\n    onModalCancel() {\n        this.setState({ showNewElementModal: false, modalInitElement: null });\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/* eslint-disable */\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = Function('return this')();\n\ngoog.exportSymbol('proto.Instruction', null, global);\ngoog.exportSymbol('proto.Processor', null, global);\ngoog.exportSymbol('proto.State', null, global);\ngoog.exportSymbol('proto.StateMachine', null, global);\ngoog.exportSymbol('proto.Transition', null, global);\ngoog.exportSymbol('proto.TransitionPredicate', null, global);\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.TransitionPredicate = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.TransitionPredicate, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.TransitionPredicate.displayName = 'proto.TransitionPredicate';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.TransitionPredicate.prototype.toObject = function(opt_includeInstance) {\n  return proto.TransitionPredicate.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.TransitionPredicate} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.TransitionPredicate.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    name: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    callableName: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    callableKwargsMap: (f = msg.getCallableKwargsMap()) ? f.toObject(includeInstance, undefined) : [],\n    callableArgs: jspb.Message.getFieldWithDefault(msg, 4, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.TransitionPredicate}\n */\nproto.TransitionPredicate.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.TransitionPredicate;\n  return proto.TransitionPredicate.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.TransitionPredicate} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.TransitionPredicate}\n */\nproto.TransitionPredicate.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCallableName(value);\n      break;\n    case 3:\n      var value = msg.getCallableKwargsMap();\n      reader.readMessage(value, function(message, reader) {\n        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, \"\");\n         });\n      break;\n    case 4:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCallableArgs(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.TransitionPredicate.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.TransitionPredicate.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.TransitionPredicate} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.TransitionPredicate.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getName();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getCallableName();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getCallableKwargsMap(true);\n  if (f && f.getLength() > 0) {\n    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);\n  }\n  f = message.getCallableArgs();\n  if (f.length > 0) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string name = 1;\n * @return {string}\n */\nproto.TransitionPredicate.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.TransitionPredicate.prototype.setName = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string callable_name = 2;\n * @return {string}\n */\nproto.TransitionPredicate.prototype.getCallableName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.TransitionPredicate.prototype.setCallableName = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * map<string, bytes> callable_kwargs = 3;\n * @param {boolean=} opt_noLazyCreate Do not create the map if\n * empty, instead returning `undefined`\n * @return {!jspb.Map<string,!(string|Uint8Array)>}\n */\nproto.TransitionPredicate.prototype.getCallableKwargsMap = function(opt_noLazyCreate) {\n  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (\n      jspb.Message.getMapField(this, 3, opt_noLazyCreate,\n      null));\n};\n\n\nproto.TransitionPredicate.prototype.clearCallableKwargsMap = function() {\n  this.getCallableKwargsMap().clear();\n};\n\n\n/**\n * optional string callable_args = 4;\n * @return {string}\n */\nproto.TransitionPredicate.prototype.getCallableArgs = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/** @param {string} value */\nproto.TransitionPredicate.prototype.setCallableArgs = function(value) {\n  jspb.Message.setProto3StringField(this, 4, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Instruction = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Instruction, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Instruction.displayName = 'proto.Instruction';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Instruction.prototype.toObject = function(opt_includeInstance) {\n  return proto.Instruction.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Instruction} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Instruction.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    name: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    audio: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    image: msg.getImage_asB64(),\n    video: msg.getVideo_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Instruction}\n */\nproto.Instruction.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Instruction;\n  return proto.Instruction.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Instruction} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Instruction}\n */\nproto.Instruction.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setAudio(value);\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setImage(value);\n      break;\n    case 4:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setVideo(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Instruction.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Instruction.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Instruction} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Instruction.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getName();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getAudio();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getImage_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n  f = message.getVideo_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string name = 1;\n * @return {string}\n */\nproto.Instruction.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.Instruction.prototype.setName = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string audio = 2;\n * @return {string}\n */\nproto.Instruction.prototype.getAudio = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.Instruction.prototype.setAudio = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional bytes image = 3;\n * @return {!(string|Uint8Array)}\n */\nproto.Instruction.prototype.getImage = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes image = 3;\n * This is a type-conversion wrapper around `getImage()`\n * @return {string}\n */\nproto.Instruction.prototype.getImage_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getImage()));\n};\n\n\n/**\n * optional bytes image = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getImage()`\n * @return {!Uint8Array}\n */\nproto.Instruction.prototype.getImage_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getImage()));\n};\n\n\n/** @param {!(string|Uint8Array)} value */\nproto.Instruction.prototype.setImage = function(value) {\n  jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n/**\n * optional bytes video = 4;\n * @return {!(string|Uint8Array)}\n */\nproto.Instruction.prototype.getVideo = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * optional bytes video = 4;\n * This is a type-conversion wrapper around `getVideo()`\n * @return {string}\n */\nproto.Instruction.prototype.getVideo_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getVideo()));\n};\n\n\n/**\n * optional bytes video = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getVideo()`\n * @return {!Uint8Array}\n */\nproto.Instruction.prototype.getVideo_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getVideo()));\n};\n\n\n/** @param {!(string|Uint8Array)} value */\nproto.Instruction.prototype.setVideo = function(value) {\n  jspb.Message.setProto3BytesField(this, 4, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Transition = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.Transition.repeatedFields_, null);\n};\ngoog.inherits(proto.Transition, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Transition.displayName = 'proto.Transition';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.Transition.repeatedFields_ = [2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Transition.prototype.toObject = function(opt_includeInstance) {\n  return proto.Transition.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Transition} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Transition.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    name: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    predicatesList: jspb.Message.toObjectList(msg.getPredicatesList(),\n    proto.TransitionPredicate.toObject, includeInstance),\n    instruction: (f = msg.getInstruction()) && proto.Instruction.toObject(includeInstance, f),\n    nextState: jspb.Message.getFieldWithDefault(msg, 4, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Transition}\n */\nproto.Transition.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Transition;\n  return proto.Transition.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Transition} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Transition}\n */\nproto.Transition.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    case 2:\n      var value = new proto.TransitionPredicate;\n      reader.readMessage(value,proto.TransitionPredicate.deserializeBinaryFromReader);\n      msg.addPredicates(value);\n      break;\n    case 3:\n      var value = new proto.Instruction;\n      reader.readMessage(value,proto.Instruction.deserializeBinaryFromReader);\n      msg.setInstruction(value);\n      break;\n    case 4:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setNextState(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Transition.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Transition.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Transition} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Transition.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getName();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getPredicatesList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      2,\n      f,\n      proto.TransitionPredicate.serializeBinaryToWriter\n    );\n  }\n  f = message.getInstruction();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.Instruction.serializeBinaryToWriter\n    );\n  }\n  f = message.getNextState();\n  if (f.length > 0) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string name = 1;\n * @return {string}\n */\nproto.Transition.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.Transition.prototype.setName = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * repeated TransitionPredicate predicates = 2;\n * @return {!Array<!proto.TransitionPredicate>}\n */\nproto.Transition.prototype.getPredicatesList = function() {\n  return /** @type{!Array<!proto.TransitionPredicate>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.TransitionPredicate, 2));\n};\n\n\n/** @param {!Array<!proto.TransitionPredicate>} value */\nproto.Transition.prototype.setPredicatesList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n\n\n/**\n * @param {!proto.TransitionPredicate=} opt_value\n * @param {number=} opt_index\n * @return {!proto.TransitionPredicate}\n */\nproto.Transition.prototype.addPredicates = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.TransitionPredicate, opt_index);\n};\n\n\nproto.Transition.prototype.clearPredicatesList = function() {\n  this.setPredicatesList([]);\n};\n\n\n/**\n * optional Instruction instruction = 3;\n * @return {?proto.Instruction}\n */\nproto.Transition.prototype.getInstruction = function() {\n  return /** @type{?proto.Instruction} */ (\n    jspb.Message.getWrapperField(this, proto.Instruction, 3));\n};\n\n\n/** @param {?proto.Instruction|undefined} value */\nproto.Transition.prototype.setInstruction = function(value) {\n  jspb.Message.setWrapperField(this, 3, value);\n};\n\n\nproto.Transition.prototype.clearInstruction = function() {\n  this.setInstruction(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Transition.prototype.hasInstruction = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * optional string next_state = 4;\n * @return {string}\n */\nproto.Transition.prototype.getNextState = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/** @param {string} value */\nproto.Transition.prototype.setNextState = function(value) {\n  jspb.Message.setProto3StringField(this, 4, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Processor = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Processor, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Processor.displayName = 'proto.Processor';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Processor.prototype.toObject = function(opt_includeInstance) {\n  return proto.Processor.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Processor} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Processor.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    name: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    callableName: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    callableKwargsMap: (f = msg.getCallableKwargsMap()) ? f.toObject(includeInstance, undefined) : [],\n    callableArgs: jspb.Message.getFieldWithDefault(msg, 4, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Processor}\n */\nproto.Processor.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Processor;\n  return proto.Processor.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Processor} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Processor}\n */\nproto.Processor.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCallableName(value);\n      break;\n    case 3:\n      var value = msg.getCallableKwargsMap();\n      reader.readMessage(value, function(message, reader) {\n        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, \"\");\n         });\n      break;\n    case 4:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCallableArgs(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Processor.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Processor.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Processor} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Processor.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getName();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getCallableName();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getCallableKwargsMap(true);\n  if (f && f.getLength() > 0) {\n    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);\n  }\n  f = message.getCallableArgs();\n  if (f.length > 0) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string name = 1;\n * @return {string}\n */\nproto.Processor.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.Processor.prototype.setName = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string callable_name = 2;\n * @return {string}\n */\nproto.Processor.prototype.getCallableName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.Processor.prototype.setCallableName = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * map<string, bytes> callable_kwargs = 3;\n * @param {boolean=} opt_noLazyCreate Do not create the map if\n * empty, instead returning `undefined`\n * @return {!jspb.Map<string,!(string|Uint8Array)>}\n */\nproto.Processor.prototype.getCallableKwargsMap = function(opt_noLazyCreate) {\n  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (\n      jspb.Message.getMapField(this, 3, opt_noLazyCreate,\n      null));\n};\n\n\nproto.Processor.prototype.clearCallableKwargsMap = function() {\n  this.getCallableKwargsMap().clear();\n};\n\n\n/**\n * optional string callable_args = 4;\n * @return {string}\n */\nproto.Processor.prototype.getCallableArgs = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/** @param {string} value */\nproto.Processor.prototype.setCallableArgs = function(value) {\n  jspb.Message.setProto3StringField(this, 4, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.State = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.State.repeatedFields_, null);\n};\ngoog.inherits(proto.State, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.State.displayName = 'proto.State';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.State.repeatedFields_ = [2,3];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.State.prototype.toObject = function(opt_includeInstance) {\n  return proto.State.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.State} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.State.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    name: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    processorsList: jspb.Message.toObjectList(msg.getProcessorsList(),\n    proto.Processor.toObject, includeInstance),\n    transitionsList: jspb.Message.toObjectList(msg.getTransitionsList(),\n    proto.Transition.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.State}\n */\nproto.State.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.State;\n  return proto.State.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.State} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.State}\n */\nproto.State.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    case 2:\n      var value = new proto.Processor;\n      reader.readMessage(value,proto.Processor.deserializeBinaryFromReader);\n      msg.addProcessors(value);\n      break;\n    case 3:\n      var value = new proto.Transition;\n      reader.readMessage(value,proto.Transition.deserializeBinaryFromReader);\n      msg.addTransitions(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.State.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.State.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.State} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.State.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getName();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getProcessorsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      2,\n      f,\n      proto.Processor.serializeBinaryToWriter\n    );\n  }\n  f = message.getTransitionsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      3,\n      f,\n      proto.Transition.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional string name = 1;\n * @return {string}\n */\nproto.State.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.State.prototype.setName = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * repeated Processor processors = 2;\n * @return {!Array<!proto.Processor>}\n */\nproto.State.prototype.getProcessorsList = function() {\n  return /** @type{!Array<!proto.Processor>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.Processor, 2));\n};\n\n\n/** @param {!Array<!proto.Processor>} value */\nproto.State.prototype.setProcessorsList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n\n\n/**\n * @param {!proto.Processor=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Processor}\n */\nproto.State.prototype.addProcessors = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Processor, opt_index);\n};\n\n\nproto.State.prototype.clearProcessorsList = function() {\n  this.setProcessorsList([]);\n};\n\n\n/**\n * repeated Transition transitions = 3;\n * @return {!Array<!proto.Transition>}\n */\nproto.State.prototype.getTransitionsList = function() {\n  return /** @type{!Array<!proto.Transition>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.Transition, 3));\n};\n\n\n/** @param {!Array<!proto.Transition>} value */\nproto.State.prototype.setTransitionsList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 3, value);\n};\n\n\n/**\n * @param {!proto.Transition=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Transition}\n */\nproto.State.prototype.addTransitions = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Transition, opt_index);\n};\n\n\nproto.State.prototype.clearTransitionsList = function() {\n  this.setTransitionsList([]);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.StateMachine = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.StateMachine.repeatedFields_, null);\n};\ngoog.inherits(proto.StateMachine, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.StateMachine.displayName = 'proto.StateMachine';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.StateMachine.repeatedFields_ = [2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.StateMachine.prototype.toObject = function(opt_includeInstance) {\n  return proto.StateMachine.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.StateMachine} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.StateMachine.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    name: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    statesList: jspb.Message.toObjectList(msg.getStatesList(),\n    proto.State.toObject, includeInstance),\n    assetsMap: (f = msg.getAssetsMap()) ? f.toObject(includeInstance, undefined) : [],\n    startState: jspb.Message.getFieldWithDefault(msg, 4, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.StateMachine}\n */\nproto.StateMachine.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.StateMachine;\n  return proto.StateMachine.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.StateMachine} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.StateMachine}\n */\nproto.StateMachine.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    case 2:\n      var value = new proto.State;\n      reader.readMessage(value,proto.State.deserializeBinaryFromReader);\n      msg.addStates(value);\n      break;\n    case 3:\n      var value = msg.getAssetsMap();\n      reader.readMessage(value, function(message, reader) {\n        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, \"\");\n         });\n      break;\n    case 4:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setStartState(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.StateMachine.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.StateMachine.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.StateMachine} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.StateMachine.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getName();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getStatesList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      2,\n      f,\n      proto.State.serializeBinaryToWriter\n    );\n  }\n  f = message.getAssetsMap(true);\n  if (f && f.getLength() > 0) {\n    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);\n  }\n  f = message.getStartState();\n  if (f.length > 0) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string name = 1;\n * @return {string}\n */\nproto.StateMachine.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.StateMachine.prototype.setName = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * repeated State states = 2;\n * @return {!Array<!proto.State>}\n */\nproto.StateMachine.prototype.getStatesList = function() {\n  return /** @type{!Array<!proto.State>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.State, 2));\n};\n\n\n/** @param {!Array<!proto.State>} value */\nproto.StateMachine.prototype.setStatesList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n\n\n/**\n * @param {!proto.State=} opt_value\n * @param {number=} opt_index\n * @return {!proto.State}\n */\nproto.StateMachine.prototype.addStates = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.State, opt_index);\n};\n\n\nproto.StateMachine.prototype.clearStatesList = function() {\n  this.setStatesList([]);\n};\n\n\n/**\n * map<string, bytes> assets = 3;\n * @param {boolean=} opt_noLazyCreate Do not create the map if\n * empty, instead returning `undefined`\n * @return {!jspb.Map<string,!(string|Uint8Array)>}\n */\nproto.StateMachine.prototype.getAssetsMap = function(opt_noLazyCreate) {\n  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (\n      jspb.Message.getMapField(this, 3, opt_noLazyCreate,\n      null));\n};\n\n\nproto.StateMachine.prototype.clearAssetsMap = function() {\n  this.getAssetsMap().clear();\n};\n\n\n/**\n * optional string start_state = 4;\n * @return {string}\n */\nproto.StateMachine.prototype.getStartState = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/** @param {string} value */\nproto.StateMachine.prototype.setStartState = function(value) {\n  jspb.Message.setProto3StringField(this, 4, value);\n};\n\n\ngoog.object.extend(exports, proto);\n"],"sourceRoot":""}